using HtmlAgilityPack;
using Microsoft.Extensions.Configuration;
using OpenQA.Selenium;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Web;
using Traffic.Models;

namespace Traffic
{
    public class BrowserAgent
    {
        public static string[] agent_mobile_new = (string[])null;
        public static string[] agent_mobile_old = (string[])null;
        public static string[] agent_mobile_both = (string[])null;
        public static string[] agent_desktop_new = (string[])null;
        public static string[] agent_desktop_old = (string[])null;
        public static string[] agent_desktop_both = (string[])null;
        public static string[] agent_both_new = (string[])null;
        public static string[] agent_both_old = (string[])null;
        public static string[] agent_both_both = (string[])null;
        public static Hashtable JobBrowser = new Hashtable();
        private static IWebDriver driver;
        public static string[] FakeInfo = (string[])null;
        public static Hashtable FakeSchema = (Hashtable)null;
        private static string[] screenSize = new string[1857]
        {
      "1000x562",
      "1000x563",
      "1000x600",
      "1000x625",
      "1000x800",
      "1002x563",
      "1003x802",
      "1004x628",
      "1008x567",
      "1008x806",
      "1010x568",
      "1011x568",
      "1012x569",
      "1016x571",
      "1019x573",
      "1022x770",
      "1024x1047",
      "1024x1280",
      "1024x1366",
      "1024x1536",
      "1024x1900",
      "1024x523",
      "1024x552",
      "1024x576",
      "1024x577",
      "1024x600",
      "1024x614",
      "1024x615",
      "1024x640",
      "1024x680",
      "1024x706",
      "1024x768",
      "1024x818",
      "1024x819",
      "1024x820",
      "1024x883",
      "1025x820",
      "1026x577",
      "1027x1019",
      "1028x1000",
      "1029x643",
      "1031x1009",
      "1032x572",
      "1032x581",
      "1032x816",
      "1034x1035",
      "1035x1012",
      "1037x1025",
      "1037x1036",
      "1038x1049",
      "1038x584",
      "1039x1023",
      "1039x584",
      "1041x1027",
      "1041x585",
      "1043x1049",
      "1043x652",
      "1045x784",
      "1046x591",
      "1047x655",
      "1050x1680",
      "1050x656",
      "1051x591",
      "1057x1032",
      "1057x1044",
      "1059x1014",
      "1059x595",
      "1059x596",
      "1065x1048",
      "1066x600",
      "1066x711",
      "1067x529",
      "1067x592",
      "1067x600",
      "1067x667",
      "1067x800",
      "1067x853",
      "1073x670",
      "1075x1480",
      "1075x672",
      "1076x861",
      "1078x808",
      "1079x607",
      "1079x674",
      "1080x1620",
      "1080x1812",
      "1080x1920",
      "1080x2560",
      "1080x720",
      "1080x721",
      "1080x900",
      "1081x649",
      "1082x2221",
      "1084x610",
      "1084x677",
      "1088x612",
      "1088x614",
      "1088x615",
      "1088x725",
      "1088x819",
      "1091x614",
      "1092x614",
      "1092x615",
      "1093x614",
      "1093x615",
      "1093x616",
      "1094x615",
      "1094x730",
      "1095x730",
      "1096x616",
      "1096x731",
      "1097x537",
      "1097x617",
      "1097x686",
      "1098x618",
      "1098x686",
      "1098x823",
      "1099x560",
      "1102x619",
      "1103x621",
      "1103x828",
      "1103x883",
      "1108x613",
      "1108x692",
      "1108x738",
      "1113x696",
      "1113x742",
      "1113x890",
      "1113x939",
      "1117x744",
      "1117x894",
      "1118x651",
      "1120x630",
      "1120x700",
      "1120x701",
      "1120x840",
      "1123x898",
      "1128x624",
      "1128x752",
      "1129x635",
      "1129x706",
      "1130x706",
      "1131x905",
      "1133x637",
      "1136x581",
      "1137x2021",
      "1138x640",
      "1138x712",
      "1138x853",
      "1142x1825",
      "1143x643",
      "1143x714",
      "1143x762",
      "1146x645",
      "1150x647",
      "1152x2048",
      "1152x2049",
      "1152x648",
      "1152x720",
      "1152x721",
      "1152x864",
      "1152x870",
      "1152x922",
      "1153x720",
      "1153x721",
      "1159x724",
      "1160x686",
      "1164x655",
      "1164x727",
      "1164x728",
      "1164x776",
      "1164x873",
      "1164x931",
      "1167x729",
      "1169x730",
      "1170x658",
      "1171x659",
      "1171x878",
      "1173x660",
      "1174x610",
      "1176x662",
      "1176x885",
      "1177x543",
      "1179x737",
      "1183x665",
      "1183x668",
      "1184x666",
      "1184x790",
      "1185x667",
      "1185x948",
      "1188x668",
      "1191x670",
      "1191x745",
      "1194x672",
      "1194x955",
      "1195x896",
      "1195x956",
      "1196x673",
      "1198x749",
      "1200x1600",
      "1200x1920",
      "1200x2133",
      "1200x594",
      "1200x675",
      "1200x750",
      "1200x800",
      "1205x904",
      "1206x733",
      "1208x679",
      "1208x959",
      "1208x966",
      "1210x706",
      "1213x683",
      "1214x910",
      "1216x811",
      "1217x760",
      "1217x761",
      "1219x586",
      "1219x686",
      "1219x731",
      "1219x762",
      "1219x975",
      "1221x916",
      "1222x764",
      "1222x828",
      "1223x683",
      "1223x688",
      "1224x689",
      "1224x816",
      "1226x650",
      "1228x690",
      "1229x690",
      "1229x691",
      "1229x692",
      "1229x768",
      "1229x820",
      "1229x983",
      "1230x552",
      "1231x692",
      "1231x985",
      "1234x690",
      "1234x823",
      "1235x823",
      "1236x640",
      "1236x698",
      "1238x696",
      "1239x697",
      "1239x774",
      "1240x698",
      "1240x748",
      "1241x776",
      "1242x698",
      "1243x699",
      "1243x994",
      "1244x756",
      "1244x778",
      "1244x829",
      "1246x634",
      "1248x780",
      "1249x702",
      "1249x780",
      "1250x703",
      "1250x948",
      "1252x704",
      "1252x783",
      "1252x900",
      "1254x784",
      "1254x861",
      "1254x946",
      "1255x706",
      "1257x941",
      "1258x943",
      "1258x956",
      "1260x954",
      "1260x957",
      "1260x963",
      "1260x964",
      "1262x954",
      "1262x955",
      "1262x960",
      "1263x2021",
      "1264x644",
      "1264x748",
      "1264x922",
      "1266x791",
      "1266x931",
      "1266x952",
      "1267x1014",
      "1267x844",
      "1271x847",
      "1272x630",
      "1272x715",
      "1272x750",
      "1274x717",
      "1276x776",
      "1276x978",
      "1277x718",
      "1278x1344",
      "1279x853",
      "1280x1000",
      "1280x1002",
      "1280x1012",
      "1280x1022",
      "1280x1024",
      "1280x1025",
      "1280x1080",
      "1280x615",
      "1280x634",
      "1280x657",
      "1280x660",
      "1280x667",
      "1280x678",
      "1280x679",
      "1280x687",
      "1280x703",
      "1280x704",
      "1280x708",
      "1280x711",
      "1280x717",
      "1280x718",
      "1280x720",
      "1280x721",
      "1280x726",
      "1280x750",
      "1280x752",
      "1280x754",
      "1280x768",
      "1280x774",
      "1280x777",
      "1280x800",
      "1280x801",
      "1280x819",
      "1280x820",
      "1280x850",
      "1280x852",
      "1280x853",
      "1280x854",
      "1280x866",
      "1280x886",
      "1280x900",
      "1280x919",
      "1280x926",
      "1280x950",
      "1280x960",
      "1280x961",
      "1280x992",
      "1281x1024",
      "1281x720",
      "1281x721",
      "1289x726",
      "1290x860",
      "1292x807",
      "1292x808",
      "1293x1034",
      "1293x727",
      "1293x831",
      "1296x864",
      "1297x730",
      "1297x811",
      "1299x730",
      "1299x731",
      "1301x731",
      "1301x732",
      "1301x813",
      "1302x732",
      "1303x733",
      "1303x869",
      "1306x735",
      "1306x772",
      "1306x788",
      "1309x818",
      "1313x738",
      "1315x740",
      "1317x741",
      "1318x990",
      "1320x1056",
      "1320x742",
      "1322x744",
      "1322x800",
      "1324x745",
      "1324x828",
      "1324x883",
      "1324x993",
      "1327x749",
      "1330x748",
      "1330x762",
      "1332x844",
      "1333x1000",
      "1333x1067",
      "1333x750",
      "1333x889",
      "1334x762",
      "1334x889",
      "1336x666",
      "1336x751",
      "1336x835",
      "1337x1070",
      "1338x666",
      "1339x909",
      "1341x706",
      "1343x755",
      "1343x839",
      "1344x626",
      "1344x756",
      "1344x840",
      "1344x841",
      "1345x840",
      "1345x841",
      "1347x1011",
      "1347x1078",
      "1347x758",
      "1347x785",
      "1347x808",
      "1347x842",
      "1348x689",
      "1348x690",
      "1348x899",
      "1350x658",
      "1350x689",
      "1350x706",
      "1350x728",
      "1350x772",
      "1350x900",
      "1352x761",
      "1354x1084",
      "1354x762",
      "1356x666",
      "1360x1020",
      "1360x1024",
      "1360x651",
      "1360x670",
      "1360x765",
      "1360x768",
      "1362x1089",
      "1362x616",
      "1362x672",
      "1362x766",
      "1362x800",
      "1364x620",
      "1364x651",
      "1364x672",
      "1364x705",
      "1364x742",
      "1364x768",
      "1364x852",
      "1365x1024",
      "1365x720",
      "1365x768",
      "1366x1024",
      "1366x452",
      "1366x602",
      "1366x606",
      "1366x630",
      "1366x648",
      "1366x650",
      "1366x651",
      "1366x654",
      "1366x662",
      "1366x680",
      "1366x705",
      "1366x706",
      "1366x715",
      "1366x720",
      "1366x736",
      "1366x742",
      "1366x746",
      "1366x768",
      "1366x806",
      "1366x854",
      "1368x768",
      "1368x769",
      "1368x912",
      "1368x913",
      "1369x912",
      "1369x913",
      "1371x771",
      "1371x857",
      "1371x914",
      "1372x772",
      "1376x1101",
      "1376x1152",
      "1376x774",
      "1377x780",
      "1377x861",
      "1380x776",
      "1381x777",
      "1381x863",
      "1382x922",
      "1384x744",
      "1384x778",
      "1386x789",
      "1391x1043",
      "1391x782",
      "1391x783",
      "1391x870",
      "1394x834",
      "1396x785",
      "1397x786",
      "1398x874",
      "1400x1050",
      "1400x874",
      "1400x875",
      "1400x900",
      "1400x968",
      "1401x788",
      "1403x877",
      "1403x935",
      "1404x789",
      "1407x1125",
      "1408x792",
      "1409x827",
      "1410x774",
      "1410x776",
      "1410x782",
      "1412x794",
      "1413x638",
      "1414x766",
      "1414x794",
      "1415x884",
      "1416x796",
      "1416x817",
      "1416x885",
      "1418x798",
      "1419x798",
      "1419x887",
      "1420x759",
      "1421x800",
      "1422x1138",
      "1422x716",
      "1422x800",
      "1422x859",
      "1422x889",
      "1423x800",
      "1424x789",
      "1424x890",
      "1425x927",
      "1426x770",
      "1428x786",
      "1429x804",
      "1430x804",
      "1431x805",
      "1432x808",
      "1433x806",
      "1436x774",
      "1436x808",
      "1437x790",
      "1438x734",
      "1438x808",
      "1438x899",
      "1440x2560",
      "1440x2561",
      "1440x3440",
      "1440x617",
      "1440x722",
      "1440x734",
      "1440x736",
      "1440x762",
      "1440x768",
      "1440x772",
      "1440x774",
      "1440x781",
      "1440x782",
      "1440x788",
      "1440x796",
      "1440x797",
      "1440x798",
      "1440x800",
      "1440x801",
      "1440x802",
      "1440x804",
      "1440x810",
      "1440x814",
      "1440x822",
      "1440x824",
      "1440x835",
      "1440x838",
      "1440x839",
      "1440x851",
      "1440x855",
      "1440x873",
      "1440x876",
      "1440x877",
      "1440x900",
      "1440x960",
      "1441x960",
      "1443x811",
      "1444x791",
      "1444x812",
      "1448x822",
      "1448x905",
      "1449x815",
      "1451x1152",
      "1451x816",
      "1451x907",
      "1455x1091",
      "1455x818",
      "1455x909",
      "1455x970",
      "1457x882",
      "1458x743",
      "1458x774",
      "1459x2189",
      "1461x913",
      "1461x975",
      "1462x822",
      "1463x1097",
      "1463x823",
      "1463x824",
      "1463x914",
      "1463x915",
      "1463x976",
      "1464x824",
      "1466x824",
      "1466x916",
      "1467x1100",
      "1467x917",
      "1468x826",
      "1468x882",
      "1470x1000",
      "1471x828",
      "1472x704",
      "1472x828",
      "1474x921",
      "1475x829",
      "1475x830",
      "1475x922",
      "1476x768",
      "1476x830",
      "1477x831",
      "1477x923",
      "1481x833",
      "1481x855",
      "1482x926",
      "1484x1113",
      "1485x990",
      "1486x836",
      "1487x929",
      "1488x837",
      "1490x839",
      "1490x993",
      "1491x839",
      "1493x840",
      "1494x934",
      "1500x1000",
      "1500x766",
      "1500x844",
      "1500x938",
      "1501x1000",
      "1501x1001",
      "1502x768",
      "1504x1002",
      "1504x1003",
      "1504x777",
      "1504x816",
      "1504x846",
      "1506x1205",
      "1506x847",
      "1506x904",
      "1506x941",
      "1508x943",
      "1511x853",
      "1512x768",
      "1512x850",
      "1512x882",
      "1512x945",
      "1516x1011",
      "1516x853",
      "1516x947",
      "1517x800",
      "1518x722",
      "1518x853",
      "1520x1013",
      "1520x800",
      "1521x950",
      "1522x773",
      "1522x902",
      "1522x951",
      "1522x952",
      "1524x1143",
      "1524x857",
      "1525x858",
      "1526x814",
      "1527x955",
      "1528x800",
      "1530x1224",
      "1530x790",
      "1532x768",
      "1532x800",
      "1532x862",
      "1534x758",
      "1535x864",
      "1536x1024",
      "1536x1152",
      "1536x750",
      "1536x758",
      "1536x768",
      "1536x782",
      "1536x783",
      "1536x792",
      "1536x797",
      "1536x830",
      "1536x854",
      "1536x862",
      "1536x864",
      "1536x865",
      "1536x943",
      "1536x960",
      "1536x961",
      "1537x864",
      "1537x865",
      "1537x960",
      "1538x2462",
      "1538x865",
      "1540x963",
      "1541x963",
      "1543x1029",
      "1544x792",
      "1546x863",
      "1548x871",
      "1548x968",
      "1549x969",
      "1550x1034",
      "1551x969",
      "1552x873",
      "1553x874",
      "1556x956",
      "1556x972",
      "1561x878",
      "1561x976",
      "1562x873",
      "1563x1042",
      "1564x1043",
      "1566x770",
      "1567x882",
      "1567x980",
      "1569x882",
      "1571x1047",
      "1572x884",
      "1574x885",
      "1574x984",
      "1576x804",
      "1577x811",
      "1577x901",
      "1579x1053",
      "1580x1054",
      "1580x932",
      "1580x956",
      "1582x798",
      "1584x821",
      "1584x822",
      "1584x990",
      "1585x991",
      "1586x808",
      "1587x893",
      "1587x992",
      "1589x1351",
      "1589x894",
      "1590x855",
      "1590x894",
      "1595x863",
      "1597x999",
      "1599x900",
      "16000x9000",
      "1600x1000",
      "1600x1024",
      "1600x1080",
      "1600x1178",
      "1600x1200",
      "1600x1280",
      "1600x20000",
      "1600x2560",
      "1600x786",
      "1600x818",
      "1600x837",
      "1600x838",
      "1600x900",
      "1600x902",
      "1600x905",
      "1600x913",
      "1602x926",
      "1603x902",
      "1604x902",
      "1607x904",
      "1611x1074",
      "1612x1075",
      "1612x949",
      "1613x1008",
      "1613x908",
      "1615x1010",
      "1615x937",
      "1617x1011",
      "1617x909",
      "1620x1080",
      "1622x1081",
      "1623x913",
      "1625x979",
      "1626x1016",
      "1626x914",
      "1627x1017",
      "1627x915",
      "1629x916",
      "1631x1019",
      "1632x1020",
      "1632x989",
      "1633x918",
      "1633x989",
      "1636x1023",
      "1638x864",
      "1638x922",
      "1639x1025",
      "1639x847",
      "1639x864",
      "1639x865",
      "1639x922",
      "1641x1025",
      "1641x1026",
      "1641x1313",
      "1641x923",
      "1642x925",
      "1644x925",
      "1646x1029",
      "1646x926",
      "1647x1029",
      "1647x1235",
      "1647x961",
      "1650x1050",
      "1651x1010",
      "1652x929",
      "1653x930",
      "1655x1006",
      "1655x1034",
      "1655x1241",
      "1655x931",
      "1656x871",
      "1656x946",
      "1658x1028",
      "1658x1105",
      "1658x932",
      "1660x972",
      "1660x973",
      "1662x935",
      "1662x956",
      "1663x1040",
      "1664x922",
      "1664x936",
      "1664x993",
      "1670x1043",
      "1670x825",
      "1670x939",
      "1672x781",
      "1672x828",
      "1672x864",
      "1672x874",
      "1672x954",
      "1674x987",
      "1676x1048",
      "1676x943",
      "1677x943",
      "1678x1014",
      "1678x944",
      "1678x964",
      "1679x915",
      "1679x916",
      "1679x944",
      "1680x1000",
      "1680x1002",
      "1680x1005",
      "1680x1028",
      "1680x1050",
      "1680x1051",
      "1680x870",
      "1680x902",
      "1680x908",
      "1680x920",
      "1680x924",
      "1680x928",
      "1680x945",
      "1680x949",
      "1680x950",
      "1680x952",
      "1680x964",
      "1680x976",
      "1680x980",
      "1680x981",
      "1680x986",
      "1680x987",
      "1680x988",
      "1680x995",
      "1681x1050",
      "1682x988",
      "1684x1263",
      "1684x947",
      "1688x949",
      "1690x897",
      "1692x1062",
      "1694x1059",
      "1694x1129",
      "1694x953",
      "1695x961",
      "1699x1062",
      "1699x956",
      "1702x1003",
      "1704x1004",
      "1706x960",
      "1707x1024",
      "1707x1037",
      "1707x1067",
      "1707x1235",
      "1707x1280",
      "1707x1365",
      "1707x720",
      "1707x960",
      "1707x961",
      "1708x960",
      "1708x961",
      "1710x1140",
      "1714x1071",
      "1714x1143",
      "1714x964",
      "1715x1143",
      "1716x1087",
      "1716x1103",
      "1720x1440",
      "1723x969",
      "1727x971",
      "1728x1080",
      "1728x1152",
      "1728x960",
      "1728x972",
      "1729x1081",
      "1730x1081",
      "1730x973",
      "1730x986",
      "1732x1082",
      "1735x1084",
      "1739x1087",
      "1739x979",
      "1740x1087",
      "1740x979",
      "1743x769",
      "1744x1111",
      "1745x1091",
      "1745x1227",
      "1745x982",
      "1746x978",
      "1746x982",
      "1749x1006",
      "1750x1094",
      "1753x958",
      "1753x986",
      "1755x987",
      "1758x941",
      "1760x1100",
      "1760x990",
      "1761x991",
      "1763x1102",
      "1765x976",
      "1766x745",
      "1766x878",
      "1766x993",
      "1768x1105",
      "1768x992",
      "176x160",
      "1770x1113",
      "1771x852",
      "1772x997",
      "1776x1000",
      "1778x1000",
      "1778x1111",
      "1778x1333",
      "1778x1422",
      "1781x1002",
      "1786x1005",
      "1787x1117",
      "1788x1006",
      "1789x1006",
      "1789x1118",
      "1790x1007",
      "1792x1008",
      "1794x1009",
      "1794x1121",
      "1794x965",
      "1798x1011",
      "1800x1012",
      "1800x1125",
      "1804x988",
      "1805x1203",
      "1805x1204",
      "1805x957",
      "1806x1129",
      "1806x920",
      "1807x1016",
      "1807x856",
      "1808x1017",
      "1808x992",
      "1810x984",
      "1811x1019",
      "1811x868",
      "1812x914",
      "1813x1020",
      "1813x1024",
      "1813x1069",
      "1816x952",
      "1818x1031",
      "1820x948",
      "1821x1024",
      "1821x877",
      "1821x883",
      "1822x1004",
      "1823x1139",
      "1824x1026",
      "1824x1140",
      "1824x1216",
      "1824x960",
      "1825x1027",
      "1825x842",
      "1826x1024",
      "1826x1027",
      "1826x1040",
      "1826x1141",
      "1828x1028",
      "1829x1029",
      "1829x1143",
      "1829x1219",
      "1829x1463",
      "1829x771",
      "1829x904",
      "1829x928",
      "1832x908",
      "1835x1032",
      "1838x985",
      "1842x1159",
      "1843x1037",
      "1843x1046",
      "1843x1152",
      "1844x1037",
      "1844x1152",
      "1846x1038",
      "1846x1154",
      "1847x1062",
      "1847x1064",
      "1848x962",
      "1851x1041",
      "1852x1024",
      "1853x1025",
      "1854x1031",
      "1854x1058",
      "1854x859",
      "1855x975",
      "1855x985",
      "1856x862",
      "1858x1045",
      "1860x1047",
      "1862x1047",
      "1862x1058",
      "1862x1316",
      "1862x892",
      "1864x1049",
      "1864x1165",
      "1864x918",
      "1864x934",
      "1864x984",
      "1866x1076",
      "1867x1167",
      "1870x1052",
      "1872x1102",
      "1873x1054",
      "1875x1024",
      "1875x1172",
      "1876x952",
      "1877x1019",
      "1878x1252",
      "1878x890",
      "1878x936",
      "1880x690",
      "1880x936",
      "1880x968",
      "1881x1176",
      "1882x1059",
      "1882x1117",
      "1882x1176",
      "1882x876",
      "1884x1022",
      "1886x1035",
      "1886x1058",
      "1888x1112",
      "1890x1063",
      "1890x3360",
      "1892x1124",
      "1892x990",
      "1894x1098",
      "1894x1122",
      "1894x978",
      "1894x996",
      "1896x1066",
      "1896x1067",
      "1898x1120",
      "1898x957",
      "1900x1100",
      "1900x1114",
      "1900x1115",
      "1901x1069",
      "1902x1054",
      "1903x1269",
      "1904x1002",
      "1904x1016",
      "1904x1018",
      "1904x1122",
      "1904x988",
      "1905x1071",
      "1905x1190",
      "1906x1150",
      "1909x1193",
      "1910x1107",
      "1911x1600",
      "1912x1105",
      "1912x1110",
      "1912x1140",
      "1912x940",
      "1912x950",
      "1912x972",
      "1914x1016",
      "1914x1104",
      "1914x1105",
      "1914x1107",
      "1914x982",
      "1916x1016",
      "1916x1104",
      "1916x1105",
      "1916x1108",
      "1916x972",
      "1918x1016",
      "1918x1036",
      "1918x1105",
      "1918x956",
      "1918x984",
      "1919x1079",
      "1919x1080",
      "1920x1005",
      "1920x1006",
      "1920x1014",
      "1920x1016",
      "1920x1017",
      "1920x1018",
      "1920x1023",
      "1920x1028",
      "1920x1030",
      "1920x1031",
      "1920x1032",
      "1920x1034",
      "1920x1035",
      "1920x1036",
      "1920x1039",
      "1920x1042",
      "1920x1058",
      "1920x1078",
      "1920x1080",
      "1920x1081",
      "1920x1082",
      "1920x1094",
      "1920x1120",
      "1920x1135",
      "1920x1138",
      "1920x1154",
      "1920x1156",
      "1920x1176",
      "1920x1178",
      "1920x1200",
      "1920x1275",
      "1920x1279",
      "1920x1280",
      "1920x1440",
      "1920x1920",
      "1920x2160",
      "1920x3000",
      "1920x867",
      "1920x948",
      "1920x949",
      "1920x950",
      "1920x951",
      "1920x956",
      "1920x958",
      "1920x960",
      "1920x962",
      "1920x963",
      "1920x966",
      "1920x974",
      "1920x975",
      "1920x984",
      "1920x995",
      "1920x996",
      "1920x998",
      "1921x1080",
      "1922x1110",
      "1924x1024",
      "1925x1083",
      "1928x1084",
      "1929x1286",
      "1930x984",
      "1931x1207",
      "1933x1087",
      "1935x1290",
      "1936x1291",
      "1936x750",
      "1939x1091",
      "1950x1029",
      "1950x1097",
      "1951x1097",
      "1953x1221",
      "1959x1102",
      "1959x1224",
      "1963x1104",
      "1965x1310",
      "1966x823",
      "1969x1087",
      "1969x1107",
      "1969x1108",
      "1969x1575",
      "1969x830",
      "1976x1235",
      "1979x1113",
      "1979x1237",
      "1986x1117",
      "1986x1241",
      "1994x1130",
      "2000x1107",
      "2000x1125",
      "2000x1250",
      "2000x1333",
      "2000x1334",
      "2000x2000",
      "2001x1126",
      "2004x1181",
      "2004x1321",
      "2013x1074",
      "2016x1260",
      "2017x1036",
      "2020x1014",
      "2021x1137",
      "2021x1263",
      "2024x1265",
      "2028x1141",
      "2036x1165",
      "2043x1149",
      "2043x1277",
      "2047x1152",
      "2048x1033",
      "2048x1057",
      "2048x1080",
      "2048x1091",
      "2048x1130",
      "2048x1152",
      "2048x1153",
      "2048x1280",
      "2048x1536",
      "2048x864",
      "2049x1152",
      "2049x1153",
      "2051x1367",
      "2057x1157",
      "2059x1159",
      "2065x1161",
      "2065x1290",
      "2068x1138",
      "2069x1164",
      "2069x1293",
      "2074x1296",
      "2076x1168",
      "2080x1343",
      "2081x1171",
      "2087x1174",
      "2087x1304",
      "2095x1178",
      "2095x1309",
      "2095x3724",
      "2096x1179",
      "20x20",
      "2100x1312",
      "2100x1313",
      "2102x1182",
      "2102x1314",
      "2105x1316",
      "2108x1186",
      "2110x1187",
      "2110x1319",
      "2120x834",
      "2122x1326",
      "2133x1054",
      "2133x1200",
      "2133x1333",
      "2133x1600",
      "2134x1200",
      "2134x1201",
      "2138x1203",
      "2143x1339",
      "2144x1206",
      "2144x1340",
      "2151x1210",
      "2155x1212",
      "2156x1213",
      "2157x1213",
      "2157x1348",
      "2160x1215",
      "2160x1440",
      "2176x1224",
      "2181x1223",
      "2182x1227",
      "2182x1364",
      "2183x1455",
      "2187x1367",
      "2189x1459",
      "2189x1460",
      "218x195",
      "218x208",
      "218x211",
      "218x223",
      "2191x1370",
      "2194x1234",
      "2194x1371",
      "2195x1235",
      "2195x1236",
      "2200x1200",
      "2207x1241",
      "2207x1379",
      "2208x1242",
      "2208x1380",
      "2213x1297",
      "2215x1246",
      "2215x1385",
      "2226x1252",
      "2226x939",
      "2229x1272",
      "2233x1256",
      "2235x1257",
      "2240x1400",
      "2248x923",
      "2250x1500",
      "2256x1504",
      "2259x1270",
      "2259x1271",
      "2259x1412",
      "225x400",
      "2264x1274",
      "2265x1274",
      "2270x1419",
      "2272x1278",
      "2276x1280",
      "2277x1280",
      "2280x1520",
      "2286x1286",
      "2286x1429",
      "2293x960",
      "2294x960",
      "2304x1296",
      "2304x1440",
      "2308x1298",
      "2308x1442",
      "2309x966",
      "230x269",
      "230x285",
      "2313x1301",
      "2317x1245",
      "2319x1305",
      "2323x1548",
      "2327x1309",
      "2327x1455",
      "2327x982",
      "2332x1363",
      "2334x1313",
      "2338x1024",
      "2341x1317",
      "2341x1463",
      "2370x1333",
      "2370x1481",
      "2371x1334",
      "2375x1583",
      "2379x1200",
      "2380x1339",
      "2389x1363",
      "2394x1363",
      "2400x1350",
      "2400x1500",
      "2400x1600",
      "2407x1354",
      "240x278",
      "240x320",
      "2420x1370",
      "2427x1251",
      "2430x1367",
      "2432x1251",
      "2435x1522",
      "2438x1029",
      "2438x1371",
      "2438x1524",
      "2441x1373",
      "2441x1525",
      "2457x1029",
      "2458x1382",
      "2462x1385",
      "2464x1352",
      "2465x1032",
      "2469x1248",
      "2471x1544",
      "2477x1394",
      "2482x1024",
      "2484x1396",
      "2492x1417",
      "2494x1558",
      "2498x1054",
      "2504x1394",
      "2506x1416",
      "2508x1411",
      "2516x1344",
      "2516x1352",
      "2518x1352",
      "2520x1575",
      "2526x1421",
      "2526x1579",
      "2527x1225",
      "2528x1378",
      "2529x1314",
      "2539x1336",
      "2541x1314",
      "2541x1355",
      "2541x1377",
      "2544x1001",
      "2544x1338",
      "2544x1401",
      "2548x1067",
      "2549x1434",
      "2556x1326",
      "2559x1329",
      "2560x1022",
      "2560x1024",
      "2560x1057",
      "2560x1080",
      "2560x1298",
      "2560x1299",
      "2560x1317",
      "2560x1320",
      "2560x1331",
      "2560x1336",
      "2560x1343",
      "2560x1344",
      "2560x1345",
      "2560x1348",
      "2560x1350",
      "2560x1364",
      "2560x1366",
      "2560x1376",
      "2560x1379",
      "2560x1380",
      "2560x1387",
      "2560x1390",
      "2560x1392",
      "2560x1413",
      "2560x1417",
      "2560x1440",
      "2560x1441",
      "2560x1600",
      "2560x2048",
      "2561x1440",
      "2561x1441",
      "2581x1452",
      "2585x1615",
      "2595x1459",
      "2618x1473",
      "2618x1636",
      "2621x1097",
      "2625x1641",
      "2633x1481",
      "2646x1108",
      "2648x1490",
      "2656x1771",
      "2667x1500",
      "2667x1667",
      "2672x1503",
      "2695x1137",
      "2695x1465",
      "2695x1516",
      "2697x1685",
      "2698x1129",
      "2704x1521",
      "270x354",
      "2714x1397",
      "2731x1536",
      "2732x1536",
      "2736x1824",
      "2742x1542",
      "2743x1356",
      "2743x1543",
      "2743x1714",
      "2751x1152",
      "2752x1014",
      "2752x1152",
      "2774x1161",
      "2783x1565",
      "2792x1861",
      "2797x1171",
      "2803x1577",
      "281x576",
      "2820x1180",
      "282x356",
      "282x357",
      "282x362",
      "282x378",
      "282x389",
      "2844x1200",
      "2844x1460",
      "2844x1600",
      "2848x811",
      "2850x1900",
      "2859x1608",
      "2867x1200",
      "2880x1620",
      "2880x1800",
      "2880x1920",
      "2880x900",
      "290x305",
      "290x319",
      "291x415",
      "2926x1646",
      "2954x1662",
      "2991x1252",
      "3000x2000",
      "3000x2048",
      "3000x3000",
      "3008x1586",
      "3008x1692",
      "300x371",
      "300x391",
      "300x395",
      "300x396",
      "300x405",
      "300x406",
      "300x411",
      "300x412",
      "300x420",
      "3012x1271",
      "3012x1694",
      "3072x1280",
      "3072x1728",
      "3072x960",
      "3073x1280",
      "3073x1728",
      "3074x976",
      "3084x1301",
      "3127x1309",
      "313x410",
      "313x445",
      "3146x976",
      "314x240",
      "3178x1651",
      "317x451",
      "3180x976",
      "3200x1080",
      "3200x1333",
      "3200x1350",
      "3200x1800",
      "320x3659",
      "320x401",
      "320x416",
      "320x452",
      "320x480",
      "320x490",
      "320x533",
      "320x534",
      "320x544",
      "320x568",
      "320x569",
      "320x570",
      "320x588",
      "320x640",
      "320x658",
      "3215x1346",
      "3219x2146",
      "324x576",
      "3276x1371",
      "3277x1728",
      "3310x1862",
      "3328x1872",
      "335x324",
      "3360x1050",
      "3360x1440",
      "3360x1890",
      "3360x2100",
      "3362x1376",
      "3368x1384",
      "3372x1384",
      "3374x1380",
      "3378x1372",
      "337x453",
      "337x491",
      "337x496",
      "3390x976",
      "3396x1395",
      "3400x1395",
      "3413x1422",
      "3413x1440",
      "3413x1920",
      "342x472",
      "342x487",
      "342x497",
      "342x500",
      "342x503",
      "342x608",
      "3436x1287",
      "3440x1440",
      "3462x976",
      "346x615",
      "346x692",
      "347x347",
      "3500x944",
      "3504x976",
      "3540x944",
      "3552x1057",
      "357x595",
      "3600x1080",
      "3600x2400",
      "360x480",
      "360x512",
      "360x592",
      "360x594",
      "360x597",
      "360x598",
      "360x600",
      "360x604",
      "360x640",
      "360x668",
      "360x670",
      "360x680",
      "360x692",
      "360x720",
      "360x740",
      "360x760",
      "361x642",
      "3651x973",
      "3653x973",
      "3655x973",
      "3657x2057",
      "369x466",
      "375x667",
      "375x812",
      "3766x1010",
      "376x668",
      "377x628",
      "377x670",
      "377x753",
      "3798x1127",
      "3804x1100",
      "380x495",
      "3810x1112",
      "3820x1111",
      "3822x1600",
      "3828x1019",
      "3832x982",
      "3840x1024",
      "3840x1080",
      "3840x1200",
      "3840x1600",
      "3840x2104",
      "3840x2160",
      "3840x2400",
      "3865x1618",
      "387x688",
      "390x693",
      "391x391",
      "393x699",
      "393x742",
      "393x786",
      "394x315",
      "3959x2227",
      "400x594",
      "400x640",
      "403x671",
      "4042x2274",
      "408x678",
      "408x768",
      "4096x5120",
      "410x728",
      "411x731",
      "4128x1728",
      "412x618",
      "412x689",
      "412x732",
      "412x765",
      "412x823",
      "412x846",
      "414x736",
      "414x770",
      "414x803",
      "421x748",
      "424x753",
      "424x795",
      "424x848",
      "431x243",
      "432x719",
      "432x725",
      "432x768",
      "438x854",
      "441x784",
      "451x770",
      "455x809",
      "455x910",
      "4587x1920",
      "4800x1350",
      "480x1152",
      "480x300",
      "480x800",
      "480x801",
      "480x853",
      "480x854",
      "480x855",
      "485x861",
      "485x969",
      "486x863",
      "487x866",
      "505x505",
      "5120x2880",
      "517x826",
      "533x706",
      "534x320",
      "534x854",
      "540x960",
      "5486x3086",
      "569x320",
      "570x320",
      "5760x1080",
      "5760x1200",
      "582x931",
      "595x335",
      "598x360",
      "600x1024",
      "600x879",
      "600x960",
      "600x976",
      "601x914",
      "601x962",
      "628x1004",
      "640x360",
      "640x400",
      "640x480",
      "640x512",
      "640x960",
      "652x522",
      "668x1188",
      "672x504",
      "677x1084",
      "683x512",
      "683x546",
      "683x911",
      "686x1098",
      "700x1120",
      "720x1280",
      "720x360",
      "720x450",
      "722x802",
      "722x844",
      "727x1027",
      "728x858",
      "730x486",
      "731x411",
      "732x412",
      "740x360",
      "742x393",
      "747x467",
      "753x424",
      "753x602",
      "764x530",
      "7680x1080",
      "768x1024",
      "768x1366",
      "768x976",
      "774x1376",
      "774x435",
      "775x1376",
      "777x439",
      "780x439",
      "781x439",
      "800x1232",
      "800x1280",
      "800x450",
      "800x600",
      "800x640",
      "800x800",
      "804x452",
      "819x614",
      "819x655",
      "820x480",
      "820x615",
      "822x858",
      "823x412",
      "823x514",
      "834x1112",
      "835x470",
      "840x525",
      "846x412",
      "846x512",
      "853x480",
      "853x683",
      "854x480",
      "854x534",
      "854x683",
      "864x1536",
      "864x1537",
      "869x489",
      "875x1400",
      "875x569",
      "878x1171",
      "881x495",
      "883x706",
      "884x553",
      "889x1422",
      "890x668",
      "893x502",
      "900x1280",
      "900x1440",
      "900x1600",
      "907x512",
      "911x512",
      "912x608",
      "914x514",
      "914x731",
      "918x734",
      "922x576",
      "922x799",
      "931x698",
      "937x527",
      "937x585",
      "942x530",
      "946x724",
      "947x701",
      "948x759",
      "950x534",
      "960x1536",
      "960x1537",
      "960x540",
      "960x600",
      "961x600",
      "961x601",
      "962x601",
      "968x693",
      "970x545",
      "973x548",
      "975x731",
      "975x780",
      "976x549",
      "977x550",
      "977x651",
      "985x554",
      "985x591",
      "985x615",
      "985x788",
      "987x658",
      "988x618",
      "991x793",
      "993x621"
        };

        public static void RandomScroll(IWebDriver _driver, IWebElement element = null)
        {
            long num1 = (long)new Random().Next(3, 5);
            int num2 = 0;
            while ((long)num2 < num1)
            {
                ++num2;
                try
                {
                    if (element == null)
                        BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowDown);
                    else
                        ((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].scrollTop += 50;", (object)element);
                }
                catch
                {
                }
                Thread.Sleep(1000);
            }
        }

        public static bool href_Contains_target(
          string href,
          string target,
          bool wildcard,
          string exttarget)
        {
            SettingManager.Logger(string.Format("href_Contains_target href: {0} | target: {1} exttarget: {2}", (object)href, (object)target, (object)exttarget));
            if (string.IsNullOrEmpty(href) || string.IsNullOrEmpty(target))
                return false;
            string str1 = WebUtility.UrlDecode(href.Replace("&amp;", "&"));
            string str2 = WebUtility.UrlDecode(target.Replace("https://", "").Replace("http://", ""));
            if (str1.Contains(str2))
                return true;
            string str3 = str2.Replace("/en-us/", "/en/");
            if (str1.Contains(str3))
                return true;
            if (!string.IsNullOrEmpty(exttarget))
            {
                string str4 = exttarget.Replace("https://", "").Replace("http://", "");
                if (str1.Contains(str4))
                    return true;
                string str5 = str4.Replace("/en-us/", "/en/");
                if (str1.Contains(str5))
                    return true;
            }
            if (wildcard)
            {
                try
                {
                    string host1 = new Uri(href).Host;
                    string host2 = new Uri(target).Host;
                    if (host1 == host2)
                        return true;
                    if (!string.IsNullOrEmpty(exttarget))
                    {
                        string host3 = new Uri(exttarget).Host;
                        if (host1 == host3)
                            return true;
                    }
                }
                catch (Exception ex)
                {
                    return false;
                }
            }
            return false;
        }

        public static HtmlNode Get_a_Node(HtmlNode ItemNode)
        {
            HtmlNode aNode = (HtmlNode)null;
            try
            {
                HtmlNode htmlNode = ItemNode.Descendants("a").Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["href"] != null && node.Attributes["href"].Value.Contains("://"))).First<HtmlNode>();
                if (htmlNode != null)
                    aNode = htmlNode;
            }
            catch
            {
            }
            return aNode;
        }

        public static IWebElement GetCompanyPostsButton(IWebDriver driver)
        {
            try
            {
                List<IWebElement> list1 = driver.FindElements(By.XPath("//a[@data-index='1' and contains(@role,'tab')]")).ToList<IWebElement>();
                if (list1 != null && list1.Count<IWebElement>() > 0)
                    return list1.First<IWebElement>();
                List<IWebElement> list2 = driver.FindElements(By.XPath("//div[@data-business and @data-full-page-enabled]")).ToList<IWebElement>();
                if (list2 != null)
                {
                    if (list2.Count<IWebElement>() > 0)
                    {
                        foreach (ISearchContext searchContext in list2)
                        {
                            IWebElement element = searchContext.FindElement(By.XPath("//div[@class='EUjJDc']"));
                            if (element != null)
                                return element;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                SettingManager.Logger(string.Format("Exception GetGMBButton: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
            }
            return (IWebElement)null;
        }

        public static IWebElement GetGMBButton(IWebDriver driver)
        {
            try
            {
                List<IWebElement> list1 = driver.FindElements(By.XPath("//div[contains(@data-href, 'rlst=f')]")).ToList<IWebElement>();
                if (list1 != null && list1.Count<IWebElement>() > 0)
                    return list1.First<IWebElement>();
                List<IWebElement> list2 = driver.FindElements(By.XPath("//div[contains(@data-href, 'rflfq=')]")).ToList<IWebElement>();
                if (list2 != null && list2.Count<IWebElement>() > 0)
                    return list2.First<IWebElement>();
                List<IWebElement> list3 = driver.FindElements(By.XPath("//a[contains(@href,'rlst=f')]")).ToList<IWebElement>();
                if (list3 != null && list3.Count<IWebElement>() > 0)
                    return list3.First<IWebElement>();
                List<IWebElement> list4 = driver.FindElements(By.XPath("//a[contains(@href,'rflfq=')]")).ToList<IWebElement>();
                if (list4 != null && list4.Count<IWebElement>() > 0)
                    return list4.First<IWebElement>();
                List<IWebElement> list5 = driver.FindElements(By.XPath("//a[contains(@class,'__button')]")).ToList<IWebElement>();
                if (list5 != null)
                {
                    if (list5.Count<IWebElement>() > 0)
                        return list5.First<IWebElement>();
                }
            }
            catch (Exception ex)
            {
                SettingManager.Logger(string.Format("Exception GetGMBButton: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
            }
            return (IWebElement)null;
        }

        public static List<IWebElement> GetButton(IWebDriver driver)
        {
            List<IWebElement> button = new List<IWebElement>();
            try
            {
                try
                {
                    button.AddRange((IEnumerable<IWebElement>)driver.FindElements(By.XPath("//a[contains(@class,'lua-button')]")).ToList<IWebElement>());
                }
                catch
                {
                }
                try
                {
                    button.AddRange((IEnumerable<IWebElement>)driver.FindElements(By.XPath("//a[contains(@class,'fl')]")).ToList<IWebElement>());
                }
                catch
                {
                }
                try
                {
                    button.AddRange((IEnumerable<IWebElement>)driver.FindElements(By.XPath("//a[contains(@href,'url?')]")).ToList<IWebElement>());
                }
                catch
                {
                }
                try
                {
                    button.AddRange((IEnumerable<IWebElement>)driver.FindElements(By.XPath("//a[contains(@class,'ab_button')]")).ToList<IWebElement>());
                }
                catch
                {
                }
            }
            catch (Exception ex)
            {
                SettingManager.Logger(string.Format("Exception GetButton: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
            }
            return button;
        }

        public static List<HtmlNode> GetGoogleResultItems(string contents)
        {
            List<HtmlNode> googleResultItems = new List<HtmlNode>();
            HtmlDocument htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(contents);
            HtmlNode documentNode = htmlDocument.DocumentNode;
            HtmlNodeCollection source = documentNode.SelectNodes("//div[@id='rso' or @id='extrares']//div[contains(@class,'mnr-c xpd')]");
            if (source != null)
            {
                try
                {
                    googleResultItems.AddRange((IEnumerable<HtmlNode>)source.ToList<HtmlNode>());
                }
                catch
                {
                }
            }
            HtmlNodeCollection htmlNodeCollection1 = documentNode.SelectNodes("//div[@id='rso' or @id='extrares']");
            if (htmlNodeCollection1 != null)
            {
                foreach (HtmlNode htmlNode in (IEnumerable<HtmlNode>)htmlNodeCollection1)
                {
                    try
                    {
                        googleResultItems.AddRange((IEnumerable<HtmlNode>)htmlNode.Descendants("div").ToList<HtmlNode>().Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["data-hveid"] != null || node.Attributes["data-ved"] != null)).ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                }
            }
            HtmlNodeCollection htmlNodeCollection2 = documentNode.SelectNodes("//div[@id='main']");
            if (htmlNodeCollection2 != null)
            {
                foreach (HtmlNode htmlNode in (IEnumerable<HtmlNode>)htmlNodeCollection2)
                {
                    try
                    {
                        googleResultItems.AddRange((IEnumerable<HtmlNode>)htmlNode.ChildNodes.ToList<HtmlNode>().Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["class"] != null && node.Attributes["class"].Value.Contains(" xpd "))).ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                }
            }
            HtmlNodeCollection htmlNodeCollection3 = documentNode.SelectNodes("//div[@id='ires']");
            if (htmlNodeCollection3 != null)
            {
                foreach (HtmlNode htmlNode in (IEnumerable<HtmlNode>)htmlNodeCollection3)
                {
                    try
                    {
                        googleResultItems.AddRange((IEnumerable<HtmlNode>)htmlNode.Descendants("div").ToList<HtmlNode>().Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["class"] != null && node.Attributes["class"].Value.Equals("g"))).ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                }
            }
            HtmlNodeCollection htmlNodeCollection4 = documentNode.SelectNodes("//div[@id='universal']");
            if (htmlNodeCollection4 != null)
            {
                foreach (HtmlNode htmlNode in (IEnumerable<HtmlNode>)htmlNodeCollection4)
                {
                    try
                    {
                        googleResultItems.AddRange((IEnumerable<HtmlNode>)htmlNode.ChildNodes.ToList<HtmlNode>().Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["class"] != null && node.Attributes["class"].Value.Contains("web_result"))).ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                }
            }
            HtmlNodeCollection htmlNodeCollection5 = documentNode.SelectNodes("//ol[@id='b_results']");
            if (htmlNodeCollection5 != null)
            {
                foreach (HtmlNode htmlNode in (IEnumerable<HtmlNode>)htmlNodeCollection5)
                {
                    try
                    {
                        googleResultItems.AddRange((IEnumerable<HtmlNode>)htmlNode.Descendants("li").ToList<HtmlNode>().Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["data-bm"] != null)).ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                }
            }
            return googleResultItems;
        }

        public static List<HtmlNode> GetSuperGsiteResultItems(string contents)
        {
            List<HtmlNode> gsiteResultItems = new List<HtmlNode>();
            HtmlDocument htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(contents);
            IEnumerable<HtmlNode> source = htmlDocument.DocumentNode.Descendants("section").Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["id"] != null && node.Attributes["id"].Value.Contains("posts")));
            if (source.Count<HtmlNode>() > 0)
                gsiteResultItems = source.ElementAt<HtmlNode>(0).Descendants("a").Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["data-tracking-element-type"] != null)).ToList<HtmlNode>();
            return gsiteResultItems;
        }

        public static void ClickChangeToEnglish(IWebDriver driver)
        {
            try
            {
                IWebElement element = BrowserAgent._driver.FindElement(By.XPath("//a[text()='Change to English']"));
                if (element == null || !element.Displayed)
                    return;
                BrowserAgent.Click(BrowserAgent._driver, element);
                Thread.Sleep(5000);
            }
            catch
            {
            }
        }

        public static void ClickSearchinsteadfor(IWebDriver driver)
        {
            try
            {
                IWebElement element1 = BrowserAgent._driver.FindElement(By.XPath("//span[text()='Search instead for']"));
                if (element1 == null || !element1.Displayed)
                    return;
                IWebElement element2 = element1.FindElement(By.XPath(".//following-sibling::a[@class='spell_orig']"));
                if (element2 == null)
                    return;
                BrowserAgent.Click(BrowserAgent._driver, element2);
                Thread.Sleep(5000);
            }
            catch (Exception ex)
            {
            }
        }

        public static void ClickUpdateLocation(IWebDriver driver)
        {
            try
            {
                IWebElement element = BrowserAgent._driver.FindElement(By.XPath("//a[text()='Use precise location']"));
                if (element != null)
                {
                    if (element.Displayed)
                        BrowserAgent.Click(BrowserAgent._driver, element);
                }
            }
            catch
            {
            }
            Thread.Sleep(2000);
            try
            {
                IWebElement element = BrowserAgent._driver.FindElement(By.XPath("//a[text()='Update location']"));
                if (element != null)
                {
                    if (element.Displayed)
                        BrowserAgent.Click(BrowserAgent._driver, element);
                }
            }
            catch
            {
            }
            Thread.Sleep(2000);
            driver.Navigate().GoToUrl(driver.Url);
        }

        public static List<IWebElement> GetGMBResultItems(IWebDriver driver, out int nPageNum)
        {
            nPageNum = 10;
            List<IWebElement> list1 = driver.FindElements(By.XPath("//div[contains(@jsaction,'hero_carousel_call_to_action_card_shown')]")).ToList<IWebElement>();
            if (list1 != null && list1.Count<IWebElement>() > 0)
                return list1;
            List<IWebElement> list2 = driver.FindElements(By.XPath("//div[@id='ires']//ol//tr")).ToList<IWebElement>();
            if (list2 != null && list2.Count<IWebElement>() > 0)
            {
                List<IWebElement> source = new List<IWebElement>();
                foreach (ISearchContext searchContext in list2)
                {
                    IWebElement element = searchContext.FindElement(By.XPath(".//a"));
                    if (element != null)
                        source.Add(element);
                }
                if (source.Count<IWebElement>() > 0)
                    return source;
            }
            List<IWebElement> list3 = driver.FindElements(By.XPath("//div[@id='main']//a[contains(@href,'sa=')]")).ToList<IWebElement>();
            if (list3 != null && list3.Count<IWebElement>() > 0)
            {
                List<IWebElement> source = new List<IWebElement>();
                foreach (IWebElement webElement1 in list3)
                {
                    foreach (IWebElement webElement2 in webElement1.FindElements(By.XPath("following-sibling::div")).ToList<IWebElement>())
                    {
                        if (webElement2.Text.ToUpper().Contains("MORE INFO"))
                        {
                            source.Add(webElement1);
                            break;
                        }
                    }
                }
                if (source.Count<IWebElement>() > 0)
                    return source;
            }
            List<IWebElement> list4 = driver.FindElements(By.XPath("//div[@id='rso']//div[contains(@class,'mnr-c')]")).ToList<IWebElement>();
            if (list4 == null || list4.Count<IWebElement>() <= 0)
                return (List<IWebElement>)null;
            nPageNum = 20;
            return list4;
        }

        public static bool GoNextPage(int PageNo)
        {
            try
            {
                IWebElement element = BrowserAgent._driver.FindElement(By.XPath("//a[@id='pnnext']"));
                if (element != null)
                {
                    if (element.Displayed)
                    {
                        BrowserAgent.Click(BrowserAgent._driver, element);
                        Thread.Sleep(4000);
                        return true;
                    }
                }
            }
            catch
            {
            }
            try
            {
                IWebElement element = BrowserAgent._driver.FindElement(By.XPath("//a[text()='" + PageNo.ToString() + "' and contains(@class,'fl')]"));
                if (element != null)
                {
                    if (element.Displayed)
                    {
                        BrowserAgent.Click(BrowserAgent._driver, element);
                        Thread.Sleep(4000);
                        return true;
                    }
                }
            }
            catch
            {
            }
            try
            {
                IWebElement element = BrowserAgent._driver.FindElement(By.XPath("//a[@aria-label='Page " + PageNo.ToString() + "']"));
                if (element != null)
                {
                    if (element.Displayed)
                    {
                        BrowserAgent.Click(BrowserAgent._driver, element);
                        Thread.Sleep(4000);
                        return true;
                    }
                }
            }
            catch
            {
            }
            try
            {
                IWebElement element = BrowserAgent._driver.FindElement(By.XPath("//a[@aria-label='Next page']"));
                if (element != null)
                {
                    if (element.Displayed)
                    {
                        BrowserAgent.Click(BrowserAgent._driver, element);
                        Thread.Sleep(4000);
                        return true;
                    }
                }
            }
            catch
            {
            }
            try
            {
                IWebElement element = BrowserAgent._driver.FindElement(By.XPath("//a[@aria-label='More results']"));
                if (element != null)
                {
                    if (element.Displayed)
                    {
                        BrowserAgent.Click(BrowserAgent._driver, element);
                        Thread.Sleep(4000);
                        return true;
                    }
                }
            }
            catch
            {
            }
            try
            {
                IWebElement element = BrowserAgent._driver.FindElement(By.XPath("//a[text()='Next page »']"));
                if (element != null)
                {
                    if (element.Displayed)
                    {
                        BrowserAgent.Click(BrowserAgent._driver, element);
                        Thread.Sleep(4000);
                        return true;
                    }
                }
            }
            catch
            {
            }
            try
            {
                IWebElement element = BrowserAgent._driver.FindElement(By.XPath("//a[contains(@href, '/search?q=') and contains(@href, 'start=')]"));
                if (element != null)
                {
                    if (element.Displayed)
                    {
                        BrowserAgent.Click(BrowserAgent._driver, element);
                        Thread.Sleep(4000);
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
            }
            BrowserAgent.SendKeys(BrowserAgent._driver.FindElement(By.TagName("body")), Keys.End);
            Thread.Sleep(2000);
            return false;
        }

        public static async Task<SurfResult> OpenManheim(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget,
          bool impressions)
        {
            SurfResult surfResult = new SurfResult();
            HtmlDocument htmlDocument = new HtmlDocument();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            htmlDocument.LoadHtml(_driver.PageSource);
            int PageNo = 1;
            bool flag = true;
            int tickCount = Environment.TickCount;
            while (Environment.TickCount - tickCount <= 200000 && (BrowserAgent.WaitForPageLoding(_driver, "ires") || BrowserAgent.WaitForPageLoding(_driver, "main") || BrowserAgent.WaitForPageLoding(_driver, "yDmH0d") || BrowserAgent.WaitForPageLoding(_driver, "b_results")))
            {
                try
                {
                    List<HtmlNode> googleResultItems = BrowserAgent.GetGoogleResultItems(_driver.PageSource);
                    BrowserAgent.RandomScroll(_driver);
                    if (googleResultItems != null)
                    {
                        foreach (HtmlNode ItemNode in googleResultItems)
                        {
                            string href = "";
                            HtmlNode aNode = BrowserAgent.Get_a_Node(ItemNode);
                            try
                            {
                                href = aNode.Attributes["href"].Value;
                            }
                            catch
                            {
                            }
                            if (href != "")
                                ++surfResult.nRanks;
                            if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                            {
                                if (!impressions)
                                    BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(aNode.XPath)));
                                surfResult.IsSuccess = true;
                                flag = false;
                                break;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 1: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                    surfResult.FailReason = 2;
                    break;
                }
                if (flag)
                {
                    ++PageNo;
                    if (PageNo <= 20)
                    {
                        SettingManager.Logger(string.Format("Normal Go Next Page: {0}", (object)PageNo));
                        surfResult.nRanks = !BrowserAgent.GoNextPage(PageNo) ? 0 : (PageNo - 1) * 10;
                        Thread.Sleep(2000);
                    }
                    else
                        break;
                }
                else
                    break;
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenMymapSearch(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget)
        {
            SurfResult surfResult = new SurfResult();
            HtmlDocument htmlDocument = new HtmlDocument();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            int tickCount = Environment.TickCount;
            do
                ;
            while (Environment.TickCount - tickCount <= 200000 && BrowserAgent.WaitForPageLoding(_driver, "i4ewOd-UzWXSb"));
            Thread.Sleep(4000);
            htmlDocument.LoadHtml(_driver.PageSource);
            HtmlNode htmlNode1 = htmlDocument.DocumentNode.SelectNodes("//div[@class='i4ewOd-UzWXSb']").ToArray<HtmlNode>()[0].Descendants("div").First<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["class"] != null && node.Attributes["class"].Value == "gm-style")).Descendants("div").ToArray<HtmlNode>()[0];
            List<HtmlNode> htmlNodeList1 = new List<HtmlNode>();
            List<HtmlNode> htmlNodeList2 = new List<HtmlNode>();
            if (htmlNode1 != null)
                htmlNodeList1.AddRange((IEnumerable<HtmlNode>)htmlNode1.Descendants("img").ToList<HtmlNode>().Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["src"] != null && !node.Attributes["src"].Value.Contains("maps.googleapis.com"))).ToList<HtmlNode>());
            foreach (HtmlNode htmlNode2 in htmlNodeList1)
            {
                BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode2.ParentNode.XPath)));
                Thread.Sleep(500);
                htmlDocument.LoadHtml(_driver.PageSource);
                HtmlNodeCollection htmlNodeCollection = htmlDocument.DocumentNode.SelectNodes("//div[@id='featurecardPanel']");
                if (htmlNodeCollection != null)
                {
                    foreach (HtmlNode htmlNode3 in (IEnumerable<HtmlNode>)htmlNodeCollection)
                    {
                        try
                        {
                            htmlNodeList2.AddRange((IEnumerable<HtmlNode>)htmlNode3.Descendants("a").ToList<HtmlNode>().Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["href"].Value != null)).ToList<HtmlNode>());
                        }
                        catch
                        {
                        }
                    }
                    foreach (HtmlNode htmlNode4 in htmlNodeList2)
                    {
                        string href = "";
                        try
                        {
                            href = htmlNode4.Attributes["href"].Value;
                        }
                        catch
                        {
                        }
                        if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                        {
                            BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode4.XPath)));
                            Thread.Sleep(2000);
                            string windowHandle = _driver.WindowHandles[1];
                            _driver.SwitchTo().Window(windowHandle);
                            surfResult.IsSuccess = true;
                            break;
                        }
                    }
                }
                if (surfResult.IsSuccess)
                    break;
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimSuperGsite(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget,
          string Keyword,
          string ltc,
          string option)
        {
            SurfResult surfResult = new SurfResult();
            HtmlDocument htmlDocument = new HtmlDocument();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            int PageNo = 1;
            bool flag = true;
            int tickCount = Environment.TickCount;
            while (Environment.TickCount - tickCount <= 200000 && (BrowserAgent.WaitForPageLoding(_driver, "ires") || BrowserAgent.WaitForPageLoding(_driver, "main") || BrowserAgent.WaitForPageLoding(_driver, "yDmH0d") || BrowserAgent.WaitForPageLoding(_driver, "b_results")))
            {
                try
                {
                    List<HtmlNode> googleResultItems = BrowserAgent.GetGoogleResultItems(_driver.PageSource);
                    BrowserAgent.RandomScroll(_driver);
                    if (googleResultItems != null)
                    {
                        foreach (HtmlNode ItemNode in googleResultItems)
                        {
                            ++surfResult.nRanks;
                            string href = "";
                            HtmlNode aNode = BrowserAgent.Get_a_Node(ItemNode);
                            try
                            {
                                href = aNode.Attributes["href"].Value;
                            }
                            catch
                            {
                            }
                            if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                            {
                                BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(aNode.XPath)));
                                Thread.Sleep(4000);
                                switch (option)
                                {
                                    case "Call Now":
                                        BrowserAgent.Click(_driver, _driver.FindElement(By.Id("action-list-1")));
                                        break;
                                    case "Get Quote":
                                        _driver.FindElement(By.Id("action-list-9")).Click();
                                        Thread.Sleep(3000);
                                        string[] strArray1 = File.ReadAllLines(Directory.GetCurrentDirectory() + "/FakeName.csv");
                                        int index1 = new Random().Next(1, strArray1.Length - 1);
                                        string[] strArray2 = strArray1[index1].Split(",", StringSplitOptions.None);
                                        _driver.SwitchTo().Frame(_driver.FindElement(By.TagName("iframe")));
                                        BrowserAgent.TypeLikeHuman(_driver, _driver.FindElement(By.CssSelector("div[jsname='V1ur5d']")).FindElement(By.TagName("input")), strArray2[15]);
                                        BrowserAgent.TypeLikeHuman(_driver, _driver.FindElement(By.CssSelector("div[jsname='wKtwcc']")).FindElement(By.TagName("input")), strArray2[19]);
                                        BrowserAgent.TypeLikeHuman(_driver, _driver.FindElement(By.CssSelector("div[jsname='xvr5H']")).FindElement(By.TagName("input")), strArray2[14]);
                                        BrowserAgent.Click(_driver, _driver.FindElement(By.CssSelector("div[jsname='sFeBqf']")));
                                        Thread.Sleep(2000);
                                        break;
                                    case "Get Directions":
                                        _driver.FindElement(By.Id("action-list-2")).Click();
                                        Thread.Sleep(5000);
                                        string windowHandle = _driver.WindowHandles[1];
                                        _driver.SwitchTo().Window(windowHandle);
                                        htmlDocument.LoadHtml(_driver.PageSource);
                                        HtmlNode documentNode = htmlDocument.DocumentNode;
                                        Thread.Sleep(2000);
                                        BrowserAgent.TypeLikeHuman(_driver, _driver.FindElement(By.Id("directions-searchbox-0")).FindElement(By.TagName("input")), Keyword + " " + ltc.Split(",", StringSplitOptions.None)[0]);
                                        Thread.Sleep(1000);
                                        if (_driver.PageSource.Contains("section-directions-trip-0"))
                                            _driver.FindElement(By.Id("section-directions-trip-0")).Click();
                                        Thread.Sleep(1000);
                                        if (_driver.PageSource.Contains("aria-label=\" SHARE \""))
                                            _driver.FindElement(By.CssSelector("button[aria-label=' SHARE ']")).Click();
                                        Thread.Sleep(3000);
                                        break;
                                    case "Posts":
                                        BrowserAgent.RandomScroll(_driver);
                                        List<HtmlNode> gsiteResultItems = BrowserAgent.GetSuperGsiteResultItems(_driver.PageSource);
                                        int index2 = new Random().Next(0, gsiteResultItems.Count - 1);
                                        BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(gsiteResultItems[index2].XPath)));
                                        break;
                                }
                                surfResult.IsSuccess = true;
                                flag = false;
                                break;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 1: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                    surfResult.FailReason = 2;
                    break;
                }
                if (flag)
                {
                    ++PageNo;
                    if (PageNo <= 10)
                    {
                        SettingManager.Logger(string.Format("Normal Go Next Page: {0}", (object)PageNo));
                        surfResult.nRanks = !BrowserAgent.GoNextPage(PageNo) ? 0 : (PageNo - 1) * 10;
                        Thread.Sleep(2000);
                    }
                    else
                        break;
                }
                else
                    break;
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimGsite(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget)
        {
            SurfResult surfResult = new SurfResult();
            HtmlDocument htmlDocument = new HtmlDocument();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            int tickCount = Environment.TickCount;
            try
            {
                BrowserAgent.RandomScroll(_driver);
                List<HtmlNode> htmlNodeList = new List<HtmlNode>();
                htmlDocument.LoadHtml(_driver.PageSource);
                List<HtmlNode> list1 = htmlDocument.DocumentNode.SelectNodes("//a").ToList<HtmlNode>();
                List<string> stringList = new List<string>();
                int num = 0;
                if (list1 != null)
                {
                    foreach (HtmlNode ItemNode in list1)
                    {
                        ++surfResult.nRanks;
                        string href = "";
                        BrowserAgent.Get_a_Node(ItemNode);
                        try
                        {
                            href = ItemNode.Attributes["href"].Value;
                        }
                        catch
                        {
                        }
                        SettingManager.Logger(string.Format("Normal RM: {0} Checking ", (object)href));
                        if (target != "" && BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                        {
                            SettingManager.Logger(string.Format("G-site Target Found target: {0}", (object)target));
                            BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(ItemNode.XPath)));
                            BrowserAgent.RandomScroll(_driver);
                            surfResult.IsSuccess = true;
                            num = 1;
                            break;
                        }
                        stringList.Add(ItemNode.XPath);
                    }
                    if (!surfResult.IsSuccess && _driver.PageSource.Contains("iframe") && !surfResult.IsSuccess && !surfResult.IsSuccess)
                    {
                        _driver.SwitchTo().Frame(_driver.FindElement(By.TagName("iframe")));
                        htmlDocument.LoadHtml(_driver.PageSource);
                        List<HtmlNode> list2 = htmlDocument.DocumentNode.SelectNodes("//a").ToList<HtmlNode>();
                        if (list2 != null)
                        {
                            foreach (HtmlNode ItemNode in list2)
                            {
                                ++surfResult.nRanks;
                                string href = "";
                                HtmlNode aNode = BrowserAgent.Get_a_Node(ItemNode);
                                try
                                {
                                    href = aNode.Attributes["href"].Value;
                                }
                                catch
                                {
                                }
                                if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                                {
                                    BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(aNode.XPath)));
                                    surfResult.IsSuccess = true;
                                    num = 1;
                                    break;
                                }
                            }
                        }
                    }
                    if (num == 0)
                    {
                        int index = new Random().Next(0, stringList.Count - 1);
                        _driver.FindElement(By.XPath(stringList[index])).Click();
                        BrowserAgent.RandomScroll(_driver);
                        surfResult.IsSuccess = true;
                    }
                }
            }
            catch (Exception ex)
            {
                SettingManager.Logger(string.Format("Exception 1: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                surfResult.FailReason = 2;
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimLocation(
          IWebDriver _driver,
          string keyword,
          string target,
          bool wildcard,
          string exttarget,
          List<location> ltcs,
          string ltc)
        {
            SurfResult surfResult = new SurfResult();
            HtmlDocument htmlDocument = new HtmlDocument();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            if (ltc == "")
            {
                string str = "";
                foreach (location ltc1 in ltcs)
                {
                    if (str == "")
                    {
                        str = ltc1.label;
                        ltc = ltc + str + ",";
                    }
                    else
                        ltc = ltc + ltc1.label + " " + str + ",";
                }
            }
            int num = 0;
            string[] strArray = ltc.Split(',', StringSplitOptions.None);
            Random random = new Random();
            int index1 = 0;
            for (int index2 = 0; index2 < strArray.Length - 1; ++index2)
            {
                if (!(strArray[index1] == ""))
                {
                    if (num == 0)
                    {
                        _driver.Navigate().GoToUrl("https://www.google.com/");
                        if (BrowserAgent.WaitForPageLoding(_driver, "q", false))
                        {
                            BrowserAgent.TypeLikeHuman(_driver, _driver.FindElement(By.Name("q")), keyword + " " + strArray[index1]);
                            BrowserAgent.ClickChangeToEnglish(_driver);
                            int PageNo = 1;
                            bool flag = true;
                            int tickCount = Environment.TickCount;
                            while (Environment.TickCount - tickCount <= 200000 && (BrowserAgent.WaitForPageLoding(_driver, "ires") || BrowserAgent.WaitForPageLoding(_driver, "main") || BrowserAgent.WaitForPageLoding(_driver, "yDmH0d") || BrowserAgent.WaitForPageLoding(_driver, "b_results")))
                            {
                                try
                                {
                                    List<HtmlNode> googleResultItems = BrowserAgent.GetGoogleResultItems(_driver.PageSource);
                                    BrowserAgent.RandomScroll(_driver);
                                    if (googleResultItems != null)
                                    {
                                        foreach (HtmlNode ItemNode in googleResultItems)
                                        {
                                            ++surfResult.nRanks;
                                            if (ItemNode.InnerHtml.Contains("class=\"rc\""))
                                            {
                                                string href = "";
                                                HtmlNode aNode = BrowserAgent.Get_a_Node(ItemNode);
                                                try
                                                {
                                                    href = aNode.Attributes["href"].Value;
                                                }
                                                catch
                                                {
                                                }
                                                SettingManager.Logger(string.Format("Normal RM: {0} Checking ", (object)href));
                                                if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                                                {
                                                    SettingManager.Logger(string.Format("Normal Target Found target: {0}", (object)target));
                                                    BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(aNode.XPath)));
                                                    flag = false;
                                                    BrowserAgent.RandomScroll(_driver);
                                                    num = 1;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    SettingManager.Logger(string.Format("Exception 1: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                                    surfResult.FailReason = 2;
                                    break;
                                }
                                if (flag)
                                {
                                    ++PageNo;
                                    if (PageNo <= 10)
                                    {
                                        SettingManager.Logger(string.Format("Normal Go Next Page: {0}", (object)PageNo));
                                        surfResult.nRanks = !BrowserAgent.GoNextPage(PageNo) ? 0 : (PageNo - 1) * 10;
                                        Thread.Sleep(2000);
                                    }
                                    else
                                        break;
                                }
                                else
                                    break;
                            }
                            index1 = random.Next(0, strArray.Length - 1);
                        }
                    }
                    else
                        break;
                }
            }
            surfResult.IsSuccess = true;
            return surfResult;
        }

        public static async Task<SurfResult> OpenSpike(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget,
          string sec_keyword)
        {
            SurfResult surfResult = new SurfResult();
            HtmlDocument htmlDocument = new HtmlDocument();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            int PageNo = 1;
            bool flag1 = false;
            bool flag2 = true;
            int tickCount = Environment.TickCount;
            while (Environment.TickCount - tickCount <= 200000 && (BrowserAgent.WaitForPageLoding(_driver, "ires") || BrowserAgent.WaitForPageLoding(_driver, "main") || BrowserAgent.WaitForPageLoding(_driver, "yDmH0d") || BrowserAgent.WaitForPageLoding(_driver, "b_results")))
            {
                try
                {
                    List<HtmlNode> googleResultItems = BrowserAgent.GetGoogleResultItems(_driver.PageSource);
                    BrowserAgent.RandomScroll(_driver);
                    if (googleResultItems != null)
                    {
                        foreach (HtmlNode ItemNode in googleResultItems)
                        {
                            ++surfResult.nRanks;
                            string href = "";
                            HtmlNode aNode = BrowserAgent.Get_a_Node(ItemNode);
                            try
                            {
                                href = aNode.Attributes["href"].Value;
                            }
                            catch
                            {
                            }
                            SettingManager.Logger(string.Format("Normal RM: {0} Checking ", (object)href));
                            if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                            {
                                SettingManager.Logger(string.Format("Normal Target Found target: {0}", (object)target));
                                BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(aNode.XPath)));
                                surfResult.IsSuccess = true;
                                flag2 = false;
                                break;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 1: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                    surfResult.FailReason = 2;
                    break;
                }
                if (flag2)
                {
                    ++PageNo;
                    if (PageNo > 2)
                    {
                        flag1 = true;
                        break;
                    }
                    SettingManager.Logger(string.Format("Normal Go Next Page: {0}", (object)PageNo));
                    surfResult.nRanks = !BrowserAgent.GoNextPage(PageNo) ? 0 : (PageNo - 1) * 10;
                    Thread.Sleep(2000);
                }
                else
                    break;
            }
            if (flag1)
            {
                IWebElement element = _driver.FindElement(By.Name("q"));
                element.Clear();
                BrowserAgent.TypeLikeHuman(_driver, element, sec_keyword);
                while (Environment.TickCount - tickCount <= 200000 && (BrowserAgent.WaitForPageLoding(_driver, "ires") || BrowserAgent.WaitForPageLoding(_driver, "main") || BrowserAgent.WaitForPageLoding(_driver, "yDmH0d") || BrowserAgent.WaitForPageLoding(_driver, "b_results")))
                {
                    try
                    {
                        List<HtmlNode> googleResultItems = BrowserAgent.GetGoogleResultItems(_driver.PageSource);
                        BrowserAgent.RandomScroll(_driver);
                        if (googleResultItems != null)
                        {
                            foreach (HtmlNode ItemNode in googleResultItems)
                            {
                                ++surfResult.nRanks;
                                string href = "";
                                HtmlNode aNode = BrowserAgent.Get_a_Node(ItemNode);
                                try
                                {
                                    href = aNode.Attributes["href"].Value;
                                }
                                catch
                                {
                                }
                                SettingManager.Logger(string.Format("Normal RM: {0} Checking ", (object)href));
                                if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                                {
                                    SettingManager.Logger(string.Format("Normal Target Found target: {0}", (object)target));
                                    BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(aNode.XPath)));
                                    surfResult.IsSuccess = true;
                                    flag2 = false;
                                    break;
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        SettingManager.Logger(string.Format("Exception 1: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                        surfResult.FailReason = 2;
                        break;
                    }
                    if (flag2)
                    {
                        ++PageNo;
                        if (PageNo <= 10)
                        {
                            SettingManager.Logger(string.Format("Normal Go Next Page: {0}", (object)PageNo));
                            surfResult.nRanks = !BrowserAgent.GoNextPage(PageNo) ? 0 : (PageNo - 1) * 10;
                            Thread.Sleep(2000);
                        }
                        else
                            break;
                    }
                    else
                        break;
                }
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimNormalBrand(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget,
          bool impressions)
        {
            BrowserAgent.ClickSearchinsteadfor(BrowserAgent.driver);
            return await BrowserAgent.OpenManheim(_driver, target, wildcard, exttarget, impressions);
        }

        public static async Task<SurfResult> OpenManheimForDirectFree(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget)
        {
            SurfResult surfResult = new SurfResult();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            HtmlDocument htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(_driver.PageSource);
            HtmlNode documentNode = htmlDocument.DocumentNode;
            List<HtmlNode> htmlNodeList = new List<HtmlNode>();
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//a").ToList<HtmlNode>());
            }
            catch
            {
            }
            Thread.Sleep(5000);
            try
            {
                BrowserAgent.RandomScroll(_driver);
                foreach (HtmlNode htmlNode in htmlNodeList)
                {
                    string href = "";
                    try
                    {
                        href = htmlNode.Attributes["href"].Value;
                    }
                    catch
                    {
                    }
                    SettingManager.Logger(string.Format("Normal Free RM: {0} Checking ", (object)href));
                    if (BrowserAgent.href_Contains_target(href, target, false, exttarget) && !href.Contains("search?") && !href.Contains("ServiceLogin"))
                    {
                        SettingManager.Logger(string.Format("Normal Free Target Found target: {0}", (object)target));
                        BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode.XPath)));
                        surfResult.IsSuccess = true;
                        Thread.Sleep(20000);
                        break;
                    }
                }
                if (!surfResult.IsSuccess)
                {
                    if (_driver.PageSource.Contains("iframe"))
                    {
                        if (!surfResult.IsSuccess)
                        {
                            _driver.SwitchTo().Frame(_driver.FindElement(By.TagName("iframe")));
                            List<HtmlNode> googleResultItems = BrowserAgent.GetGoogleResultItems(_driver.PageSource);
                            if (googleResultItems != null)
                            {
                                foreach (HtmlNode ItemNode in googleResultItems)
                                {
                                    ++surfResult.nRanks;
                                    string href = "";
                                    HtmlNode aNode = BrowserAgent.Get_a_Node(ItemNode);
                                    try
                                    {
                                        href = aNode.Attributes["href"].Value;
                                    }
                                    catch
                                    {
                                    }
                                    if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                                    {
                                        BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(aNode.XPath)));
                                        surfResult.IsSuccess = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                SettingManager.Logger(string.Format("Exception 1: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimForDirectProduct(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget)
        {
            SurfResult surfResult = new SurfResult();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            HtmlDocument htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(_driver.PageSource);
            HtmlNode documentNode = htmlDocument.DocumentNode;
            List<HtmlNode> htmlNodeList = new List<HtmlNode>();
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[contains(@class,'cu-container')]//a").ToList<HtmlNode>());
            }
            catch
            {
            }
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[contains(@class,'hp-xpdbox')]//a[contains(@class,'fl')]").ToList<HtmlNode>());
            }
            catch
            {
            }
            BrowserAgent.RandomScroll(_driver);
            foreach (HtmlNode htmlNode in htmlNodeList)
            {
                try
                {
                    BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode.XPath)));
                    surfResult.IsSuccess = true;
                    Thread.Sleep(20000);
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 3: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                }
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimForCompany(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget,
          string contentSnipet = "")
        {
            SurfResult surfResult = new SurfResult();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            HtmlDocument htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(_driver.PageSource);
            HtmlNode documentNode1 = htmlDocument.DocumentNode;
            List<HtmlNode> source = new List<HtmlNode>();
            IWebElement companyPostsButton = BrowserAgent.GetCompanyPostsButton(_driver);
            if (companyPostsButton != null)
            {
                SettingManager.Logger(string.Format("Company Journey click post"));
                BrowserAgent.Click(_driver, companyPostsButton);
                Thread.Sleep(40000);
                htmlDocument.LoadHtml(_driver.PageSource);
                HtmlNode documentNode2 = htmlDocument.DocumentNode;
                try
                {
                    if (companyPostsButton != null)
                        source.AddRange((IEnumerable<HtmlNode>)documentNode2.SelectNodes("//div[contains(@class,'VFlF2c')]//g-inner-card").ToList<HtmlNode>());
                    else
                        source.AddRange((IEnumerable<HtmlNode>)documentNode2.SelectNodes("//g-inner-card").ToList<HtmlNode>());
                }
                catch
                {
                }
                HtmlNodeCollection htmlNodeCollection = documentNode2.SelectNodes("//g-lightbox//div[contains(@id,'uid_lph_')]");
                if (htmlNodeCollection != null)
                    BrowserAgent.RandomScroll(_driver, _driver.FindElement(By.XPath(htmlNodeCollection[0].ParentNode.XPath)));
                else
                    BrowserAgent.RandomScroll(_driver);
                bool flag = false;
                SettingManager.Logger(string.Format("company Journey post count: {0}", (object)source.Count<HtmlNode>()));
                foreach (HtmlNode htmlNode in source)
                {
                    try
                    {
                        ++surfResult.nRanks;
                        if (surfResult.nRanks > 10)
                            surfResult.nRanks = 10;
                        if (htmlNode.InnerText.Contains(contentSnipet))
                        {
                            foreach (HtmlNode selectNode in (IEnumerable<HtmlNode>)htmlNode.SelectNodes(".//a"))
                            {
                                string href = "";
                                try
                                {
                                    href = selectNode.Attributes["href"].Value;
                                }
                                catch
                                {
                                }
                                if (!href.StartsWith("/search?") && BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                                {
                                    SettingManager.Logger(string.Format("click post"));
                                    BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(selectNode.XPath)));
                                    surfResult.IsSuccess = true;
                                    flag = true;
                                    break;
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        SettingManager.Logger(string.Format("Exception 5: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                    }
                }
                if (!flag)
                {
                    surfResult.nBrandKind = 4;
                    surfResult.IsSuccess = true;
                }
                return surfResult;
            }
            SettingManager.Logger(string.Format("Company Journey no browse post button"));
            surfResult.FailReason = 4;
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimForKnowledge(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget)
        {
            SurfResult surfResult = new SurfResult();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            HtmlDocument htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(_driver.PageSource);
            HtmlNode documentNode = htmlDocument.DocumentNode;
            List<HtmlNode> htmlNodeList = new List<HtmlNode>();
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//a[@class='lua-button']").ToList<HtmlNode>());
            }
            catch
            {
            }
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[contains(@class,'knowledge-panel')]//a[contains(@class,'ab_button')]").ToList<HtmlNode>());
            }
            catch
            {
            }
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[contains(@class,'hp-xpdbox')]//a[contains(@class,'fl')]").ToList<HtmlNode>());
            }
            catch
            {
            }
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[contains(@class,'xpdbox')]//a[@class='lua-button']").ToList<HtmlNode>());
            }
            catch
            {
            }
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='main']//div[contains(@class,'xpd')]//div//div//div//a").ToList<HtmlNode>());
            }
            catch
            {
            }
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='rhs_block']//div[contains(@class,'g-blk')]//a[contains(@class,'ab_button')]").ToList<HtmlNode>());
            }
            catch
            {
            }
            BrowserAgent.RandomScroll(_driver);
            foreach (HtmlNode htmlNode in htmlNodeList)
            {
                try
                {
                    ++surfResult.nRanks;
                    if (surfResult.nRanks > 10)
                        surfResult.nRanks = 10;
                    string href = "";
                    try
                    {
                        href = htmlNode.Attributes["href"].Value;
                    }
                    catch
                    {
                    }
                    if (!href.StartsWith("/search?"))
                    {
                        if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                        {
                            BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode.XPath)));
                            surfResult.IsSuccess = true;
                            break;
                        }
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 6: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                }
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimForBrand(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget,
          string namebusiness,
          bool impressions)
        {
            SurfResult surfResult1 = await BrowserAgent.OpenManheimForGMB(_driver, target, wildcard, exttarget, namebusiness);
            if (surfResult1.IsSuccess)
            {
                surfResult1.nBrandKind = 3;
                return surfResult1;
            }
            SurfResult surfResult2 = await BrowserAgent.OpenManheimForKnowledge(_driver, target, wildcard, exttarget);
            if (surfResult2.IsSuccess)
            {
                surfResult2.nBrandKind = 2;
                return surfResult2;
            }
            SurfResult surfResult3 = await BrowserAgent.OpenManheim(_driver, target, wildcard, exttarget, impressions);
            if (surfResult3.IsSuccess)
            {
                surfResult3.nBrandKind = 1;
                return surfResult3;
            }
            surfResult3.nBrandKind = 0;
            return surfResult3;
        }

        public static async Task<SurfResult> OpenManheimForGMB(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget,
          string namebusiness)
        {
            SurfResult surfResult = new SurfResult();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            HtmlDocument htmlDocument = new HtmlDocument();
            int num1 = -1;
            int PageNo = 1;
            List<int> intList = new List<int>();
            IJavaScriptExecutor javaScriptExecutor = (IJavaScriptExecutor)_driver;
            try
            {
                IWebElement gmbButton = BrowserAgent.GetGMBButton(_driver);
                BrowserAgent.RandomScroll(_driver);
                if (gmbButton != null)
                {
                    javaScriptExecutor.ExecuteScript("arguments[0].scrollIntoView(true);", (object)gmbButton);
                    BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowUp);
                    BrowserAgent.Click(_driver, gmbButton);
                }
                else
                {
                    surfResult.FailReason = 2;
                    return surfResult;
                }
            }
            catch (Exception ex)
            {
                SettingManager.Logger(string.Format("Exception 7: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                surfResult.FailReason = 2;
                return surfResult;
            }
            Thread.Sleep(10000);
            bool flag1 = false;
            int nPageNum = 10;
            int tickCount = Environment.TickCount;
            int num2 = 0;
            while (!flag1 && Environment.TickCount - tickCount <= 200000)
            {
                if (!BrowserAgent.WaitForPageLoding(_driver, "ires") && !BrowserAgent.WaitForPageLoding(_driver, "local-kp") && !BrowserAgent.WaitForPageLodingByDivClass(_driver, "lrl-ip"))
                {
                    if (BrowserAgent.WaitForPageLoding(_driver, "main"))
                        num1 = 4;
                    else
                        break;
                }
                long num3 = (long)new Random().Next(1, 4);
                int num4 = 0;
                while ((long)num4 < num3)
                {
                    ++num4;
                    try
                    {
                        if (num1 == 3)
                            BrowserAgent.SendKeys(_driver.FindElement(By.Id("center_col")), Keys.ArrowDown);
                        else
                            BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowDown);
                    }
                    catch
                    {
                    }
                }
                bool flag2 = false;
                try
                {
                    BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.Escape);
                    List<IWebElement> gmbResultItems = BrowserAgent.GetGMBResultItems(_driver, out nPageNum);
                    SettingManager.Logger(string.Format("GMB business count: {0}", (object)gmbResultItems.Count<IWebElement>()));
                    if (gmbResultItems != null)
                    {
                        if (gmbResultItems.Count<IWebElement>() > 0)
                        {
                            foreach (IWebElement input1 in gmbResultItems)
                            {
                                ++surfResult.nRanks;
                                string text = input1.Text;
                                flag2 = false;
                                SettingManager.Logger(string.Format("GMB business checking: {0}", (object)text));
                                foreach (string str in text.Split('\n', StringSplitOptions.None))
                                {
                                    if (str.Trim() == namebusiness.Trim())
                                    {
                                        flag2 = true;
                                        break;
                                    }
                                    if (namebusiness.Trim().Contains(str.Trim()))
                                    {
                                        flag2 = true;
                                        break;
                                    }
                                }
                                if (flag2)
                                {
                                    if (num2 < 1)
                                    {
                                        SettingManager.Logger(string.Format("GMB Founded Business ResultMode : {0}", (object)num1));
                                        javaScriptExecutor.ExecuteScript("arguments[0].scrollIntoView(true);", (object)input1);
                                        BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowUp);
                                        BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowUp);
                                        BrowserAgent.Click(_driver, input1);
                                        ++num2;
                                        break;
                                    }
                                    foreach (IWebElement input2 in input1.FindElements(By.TagName("a")).ToList<IWebElement>())
                                    {
                                        if (BrowserAgent.href_Contains_target(input2.GetAttribute("href"), target, wildcard, exttarget))
                                        {
                                            BrowserAgent.Click(_driver, input2);
                                            flag1 = true;
                                            surfResult.IsSuccess = true;
                                            return surfResult;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 8: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                    break;
                }
                SettingManager.Logger(string.Format("GMB Founded Business bFoundBusiness : {0} ResultMode: {1}", (object)flag2, (object)num1));
                if (!flag2)
                {
                    try
                    {
                        ++PageNo;
                        if (PageNo <= 10)
                        {
                            surfResult.nRanks = !BrowserAgent.GoNextPage(PageNo) ? 0 : (PageNo - 1) * nPageNum;
                            Thread.Sleep(2000);
                        }
                        else
                            break;
                    }
                    catch (Exception ex)
                    {
                        SettingManager.Logger(string.Format("Exception 9: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                        break;
                    }
                }
                else
                {
                    Thread.Sleep(1000);
                    List<IWebElement> button = BrowserAgent.GetButton(_driver);
                    try
                    {
                        if (button != null)
                        {
                            if (button.Count<IWebElement>() > 0)
                            {
                                foreach (IWebElement input in button)
                                {
                                    if (BrowserAgent.href_Contains_target(input.GetAttribute("href"), target, wildcard, exttarget))
                                    {
                                        BrowserAgent.Click(_driver, input);
                                        flag1 = true;
                                        surfResult.IsSuccess = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        SettingManager.Logger(string.Format("Exception 11: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                        break;
                    }
                }
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimForT1(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget,
          string first)
        {
            SurfResult surfResult = new SurfResult();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            HtmlDocument htmlDocument = new HtmlDocument();
            HtmlNode htmlNode1 = (HtmlNode)null;
            int num1 = -1;
            int num2 = 1;
            bool flag = true;
            List<HtmlNode> htmlNodeList = new List<HtmlNode>();
            int tickCount = Environment.TickCount;
            while (Environment.TickCount - tickCount <= 200000 && (BrowserAgent.WaitForPageLoding(_driver, "ires") || BrowserAgent.WaitForPageLoding(_driver, "main") || BrowserAgent.WaitForPageLoding(_driver, "yDmH0d")))
            {
                try
                {
                    htmlDocument.LoadHtml(_driver.PageSource);
                    htmlNode1 = htmlDocument.DocumentNode;
                    try
                    {
                        htmlNodeList.AddRange((IEnumerable<HtmlNode>)htmlNode1.SelectNodes("//div[@id='search']//div//div[@id='ires']//div[@id='rso']//div[contains(@class,'bkWMgd')]//div[contains(@class,'srg')]//div[contains(@class,'g')]//div//div[contains(@class,'rc')]//h3[contains(@class,'r')]//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    try
                    {
                        htmlNodeList.AddRange((IEnumerable<HtmlNode>)htmlNode1.SelectNodes("//div[@id='center_col']//div[@id='res']//div[@id='search']//div[@id='ires']//ol//div[contains(@class,'g')]//h3[contains(@class,'r')]//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    if (num2 <= 1 || num1 == 0)
                    {
                        BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.Escape);
                        try
                        {
                            htmlNodeList.AddRange((IEnumerable<HtmlNode>)htmlNode1.SelectNodes("//div[@id='ires']//div[@id='rso']//div[contains(@class,'srg')]//div//div[contains(@class,'ZINbbc')]//div//a[contains(@class,'C8nzq')]").ToList<HtmlNode>());
                        }
                        catch
                        {
                        }
                    }
                    else
                    {
                        string elem_id = "arc-srp" + ((num2 - 1) * 10).ToString();
                        if (BrowserAgent.WaitForPageLoding(_driver, elem_id))
                        {
                            htmlDocument.LoadHtml(_driver.PageSource);
                            htmlNode1 = htmlDocument.DocumentNode;
                            try
                            {
                                htmlNodeList.AddRange((IEnumerable<HtmlNode>)htmlNode1.SelectNodes("//div[@id='" + elem_id + "']//div//div[contains(@class,'srg')]//div//div[contains(@class,'ZINbbc')]//div//a[contains(@class,'C8nzq')]").ToList<HtmlNode>());
                            }
                            catch
                            {
                            }
                        }
                    }
                    BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.Escape);
                    try
                    {
                        htmlNodeList.AddRange((IEnumerable<HtmlNode>)htmlNode1.SelectNodes("//div[@id='main']//div[contains(@class,'xpd')]//div//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    try
                    {
                        htmlNodeList.AddRange((IEnumerable<HtmlNode>)htmlNode1.SelectNodes("//div[@id='ires']//div[@id='rso']//div[contains(@class,'srg')]//div[contains(@class,'mnr-c')]//div[contains(@class,'card-section')]//div//div[contains(@class,'rc')]//div[contains(@class,'khgTR')]//div[contains(@class,'ytwLQd')]//h3[contains(@class,'r')]//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    try
                    {
                        htmlNodeList.AddRange((IEnumerable<HtmlNode>)htmlNode1.SelectNodes("//div[@id='main']//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    BrowserAgent.RandomScroll(_driver);
                    foreach (HtmlNode htmlNode2 in htmlNodeList)
                    {
                        string str = "";
                        try
                        {
                            str = htmlNode2.Attributes["href"].Value;
                        }
                        catch
                        {
                        }
                        if (!str.StartsWith("/search?"))
                        {
                            first = first.Replace("https://", "").Replace("http://", "");
                            if (str.Contains(first))
                            {
                                BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode2.XPath)));
                                flag = false;
                                break;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 12: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                    surfResult.FailReason = 2;
                    break;
                }
                if (flag)
                {
                    ++num2;
                    try
                    {
                        if (num1 == 0 || num1 == -1)
                        {
                            try
                            {
                                IWebElement element = _driver.FindElement(By.XPath("//a[@id='pnnext']"));
                                if (element != null)
                                {
                                    BrowserAgent.Click(_driver, element);
                                    num1 = 0;
                                }
                            }
                            catch
                            {
                            }
                        }
                        if (num1 == 1 || num1 == -1)
                        {
                            try
                            {
                                IWebElement element = _driver.FindElement(By.XPath("//a[text()='" + num2.ToString() + "' and contains(@class,'fl')]"));
                                if (element != null)
                                {
                                    BrowserAgent.Click(_driver, element);
                                    num1 = 1;
                                }
                            }
                            catch
                            {
                            }
                        }
                        if (num1 == 2 || num1 == -1)
                        {
                            try
                            {
                                IWebElement element = _driver.FindElement(By.XPath("//a[@jsname='oHxHid']"));
                                if (element != null)
                                {
                                    BrowserAgent.Click(_driver, element);
                                    num1 = 2;
                                }
                            }
                            catch
                            {
                            }
                        }
                        if (num1 != 3)
                        {
                            if (num1 != -1)
                                goto label_57;
                        }
                        try
                        {
                            IWebElement element = _driver.FindElement(By.XPath("//a[@aria-label='Page " + num2.ToString() + "']"));
                            if (element != null)
                            {
                                BrowserAgent.Click(_driver, element);
                                num1 = 3;
                            }
                        }
                        catch
                        {
                        }
                    }
                    catch (Exception ex)
                    {
                        SettingManager.Logger(string.Format("Exception 13: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                        break;
                    }
                label_57:
                    Thread.Sleep(2000);
                }
                else
                    break;
            }
            if (!flag)
            {
                try
                {
                    BrowserAgent.RandomScroll(_driver);
                    HtmlNodeCollection htmlNodeCollection = htmlNode1.SelectNodes("//a");
                    int index = new Random().Next(htmlNodeCollection.Count - 1);
                    IWebElement element = _driver.FindElement(By.XPath(htmlNodeCollection[index].XPath));
                    if (element != null)
                    {
                        BrowserAgent.Click(_driver, element);
                        BrowserAgent.RandomScroll(_driver);
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 14: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                }
                try
                {
                    if (target.Length > 0)
                    {
                        _driver.Navigate().GoToUrl(target);
                        surfResult.IsSuccess = true;
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 15: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                }
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimForT1GoogleNews(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget,
          string first)
        {
            SurfResult surfResult = new SurfResult();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            HtmlDocument htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(_driver.PageSource);
            HtmlNode documentNode = htmlDocument.DocumentNode;
            int num1 = -1;
            int num2 = 1;
            bool flag1 = true;
            List<HtmlNode> htmlNodeList = new List<HtmlNode>();
            int tickCount = Environment.TickCount;
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.Descendants("a").Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.InnerText == "News")).ToList<HtmlNode>());
            }
            catch
            {
            }
            bool flag2 = false;
            foreach (HtmlNode htmlNode in htmlNodeList)
            {
                string str = "";
                try
                {
                    str = htmlNode.Attributes["href"].Value;
                }
                catch
                {
                }
                if (str.StartsWith("/search?"))
                {
                    BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode.XPath)));
                    flag2 = true;
                    break;
                }
            }
            if (!flag2)
                return surfResult;
            htmlNodeList.Clear();
            while (Environment.TickCount - tickCount <= 200000 && (BrowserAgent.WaitForPageLoding(_driver, "ires") || BrowserAgent.WaitForPageLoding(_driver, "main") || BrowserAgent.WaitForPageLoding(_driver, "yDmH0d")))
            {
                try
                {
                    htmlDocument.LoadHtml(_driver.PageSource);
                    documentNode = htmlDocument.DocumentNode;
                    try
                    {
                        htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='search']//div//div[@id='ires']//div[@id='rso']//div[contains(@class,'bkWMgd')]//div[contains(@class,'srg')]//div[contains(@class,'g')]//div//div[contains(@class,'rc')]//h3[contains(@class,'r')]//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    try
                    {
                        htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='center_col']//div[@id='res']//div[@id='search']//div[@id='ires']//ol//div[contains(@class,'g')]//h3[contains(@class,'r')]//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    if (num2 <= 1 || num1 == 0)
                    {
                        BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.Escape);
                        try
                        {
                            htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='ires']//div[@id='rso']//div[contains(@class,'srg')]//div//div[contains(@class,'ZINbbc')]//div//a[contains(@class,'C8nzq')]").ToList<HtmlNode>());
                        }
                        catch
                        {
                        }
                    }
                    else
                    {
                        string elem_id = "arc-srp" + ((num2 - 1) * 10).ToString();
                        if (BrowserAgent.WaitForPageLoding(_driver, elem_id))
                        {
                            htmlDocument.LoadHtml(_driver.PageSource);
                            documentNode = htmlDocument.DocumentNode;
                            try
                            {
                                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='" + elem_id + "']//div//div[contains(@class,'srg')]//div//div[contains(@class,'ZINbbc')]//div//a[contains(@class,'C8nzq')]").ToList<HtmlNode>());
                            }
                            catch
                            {
                            }
                        }
                    }
                    BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.Escape);
                    try
                    {
                        htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='main']//div[contains(@class,'xpd')]//div//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    try
                    {
                        htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='ires']//div[@id='rso']//div[contains(@class,'srg')]//div[contains(@class,'mnr-c')]//div[contains(@class,'card-section')]//div//div[contains(@class,'rc')]//div[contains(@class,'khgTR')]//div[contains(@class,'ytwLQd')]//h3[contains(@class,'r')]//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    try
                    {
                        htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='main']//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    BrowserAgent.RandomScroll(_driver);
                    foreach (HtmlNode htmlNode in htmlNodeList)
                    {
                        string str = "";
                        try
                        {
                            str = htmlNode.Attributes["href"].Value;
                        }
                        catch
                        {
                        }
                        if (!str.StartsWith("/search?"))
                        {
                            first = first.Replace("https://", "").Replace("http://", "");
                            if (str.Contains(first))
                            {
                                BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode.XPath)));
                                flag1 = false;
                                break;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 12: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                    surfResult.FailReason = 2;
                    break;
                }
                if (flag1)
                {
                    ++num2;
                    try
                    {
                        if (num1 == 0 || num1 == -1)
                        {
                            try
                            {
                                IWebElement element = _driver.FindElement(By.XPath("//a[@id='pnnext']"));
                                if (element != null)
                                {
                                    BrowserAgent.Click(_driver, element);
                                    num1 = 0;
                                }
                            }
                            catch
                            {
                            }
                        }
                        if (num1 == 1 || num1 == -1)
                        {
                            try
                            {
                                IWebElement element = _driver.FindElement(By.XPath("//a[text()='" + num2.ToString() + "' and contains(@class,'fl')]"));
                                if (element != null)
                                {
                                    BrowserAgent.Click(_driver, element);
                                    num1 = 1;
                                }
                            }
                            catch
                            {
                            }
                        }
                        if (num1 == 2 || num1 == -1)
                        {
                            try
                            {
                                IWebElement element = _driver.FindElement(By.XPath("//a[@jsname='oHxHid']"));
                                if (element != null)
                                {
                                    BrowserAgent.Click(_driver, element);
                                    num1 = 2;
                                }
                            }
                            catch
                            {
                            }
                        }
                        if (num1 != 3)
                        {
                            if (num1 != -1)
                                goto label_71;
                        }
                        try
                        {
                            IWebElement element = _driver.FindElement(By.XPath("//a[@aria-label='Page " + num2.ToString() + "']"));
                            if (element != null)
                            {
                                BrowserAgent.Click(_driver, element);
                                num1 = 3;
                            }
                        }
                        catch
                        {
                        }
                    }
                    catch (Exception ex)
                    {
                        SettingManager.Logger(string.Format("Exception 13: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                        break;
                    }
                label_71:
                    Thread.Sleep(2000);
                }
                else
                    break;
            }
            if (!flag1)
            {
                try
                {
                    BrowserAgent.RandomScroll(_driver);
                    HtmlNodeCollection htmlNodeCollection = documentNode.SelectNodes("//a");
                    int index = new Random().Next(htmlNodeCollection.Count - 1);
                    IWebElement element = _driver.FindElement(By.XPath(htmlNodeCollection[index].XPath));
                    if (element != null)
                    {
                        BrowserAgent.Click(_driver, element);
                        BrowserAgent.RandomScroll(_driver);
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 14: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                }
                try
                {
                    if (target.Length > 0)
                    {
                        _driver.Navigate().GoToUrl(target);
                        surfResult.IsSuccess = true;
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 15: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                }
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimForT2toT1(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget,
          string first,
          int Cflag,
          string contentSnipet)
        {
            SurfResult surfResult = new SurfResult();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            HtmlDocument htmlDocument = new HtmlDocument();
            bool flag1 = false;
            List<HtmlNode> htmlNodeList = new List<HtmlNode>();
            List<HtmlNode> source = new List<HtmlNode>();
            Thread.Sleep(5000);
            htmlDocument.LoadHtml(_driver.PageSource);
            HtmlNode documentNode1 = htmlDocument.DocumentNode;
            try
            {
                source.AddRange((IEnumerable<HtmlNode>)documentNode1.SelectNodes("//a").ToList<HtmlNode>());
            }
            catch
            {
            }
            try
            {
                BrowserAgent.RandomScroll(_driver);
                foreach (HtmlNode htmlNode in source)
                {
                    string href = "";
                    try
                    {
                        href = htmlNode.Attributes["href"].Value;
                    }
                    catch
                    {
                    }
                    SettingManager.Logger(string.Format("T2 to T1 fist checking: {0} ", (object)href));
                    if (BrowserAgent.href_Contains_target(href, first, true, ""))
                    {
                        SettingManager.Logger(string.Format("T2 to T1 Found first target: {0}", (object)first));
                        string xpath = htmlNode.XPath;
                        _driver.Navigate().GoToUrl(first);
                        flag1 = true;
                        Thread.Sleep(2000);
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                SettingManager.Logger(string.Format("Exception 1: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
            }
            if (flag1)
            {
                try
                {
                    htmlDocument.LoadHtml(_driver.PageSource);
                    HtmlNode documentNode2 = htmlDocument.DocumentNode;
                    BrowserAgent.RandomScroll(_driver);
                    try
                    {
                        htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode2.SelectNodes("//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    Thread.Sleep(5000);
                    try
                    {
                        BrowserAgent.RandomScroll(_driver);
                        foreach (HtmlNode htmlNode in htmlNodeList)
                        {
                            string href1 = "";
                            try
                            {
                                href1 = htmlNode.Attributes["href"].Value;
                            }
                            catch
                            {
                            }
                            SettingManager.Logger(string.Format("T2 to T1 second checking {0}", (object)href1));
                            if (BrowserAgent.href_Contains_target(href1, target, false, exttarget))
                            {
                                SettingManager.Logger(string.Format("T2 to T1 second Found target: {0}", (object)target));
                                string xpath = htmlNode.XPath;
                                if (Cflag == 0)
                                {
                                    BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(xpath)));
                                    surfResult.IsSuccess = true;
                                    Thread.Sleep(10000);
                                    break;
                                }
                                Thread.Sleep(10000);
                                htmlDocument.LoadHtml(_driver.PageSource);
                                HtmlNode documentNode3 = htmlDocument.DocumentNode;
                                IWebElement companyPostsButton = BrowserAgent.GetCompanyPostsButton(_driver);
                                source.Clear();
                                try
                                {
                                    if (companyPostsButton != null)
                                        source.AddRange((IEnumerable<HtmlNode>)documentNode3.SelectNodes("//div[contains(@class,'VFlF2c')]//g-inner-card").ToList<HtmlNode>());
                                    else
                                        source.AddRange((IEnumerable<HtmlNode>)documentNode3.SelectNodes("//g-inner-card").ToList<HtmlNode>());
                                }
                                catch
                                {
                                }
                                HtmlNodeCollection htmlNodeCollection = documentNode3.SelectNodes("//g-lightbox//div[contains(@id,'uid_lph_')]");
                                if (htmlNodeCollection != null)
                                    BrowserAgent.RandomScroll(_driver, _driver.FindElement(By.XPath(htmlNodeCollection[0].ParentNode.XPath)));
                                else
                                    BrowserAgent.RandomScroll(_driver);
                                bool flag2 = false;
                                SettingManager.Logger(string.Format("company Journey post count: {0}", (object)source.Count<HtmlNode>()));
                                using (List<HtmlNode>.Enumerator enumerator = source.GetEnumerator())
                                {
                                    while (enumerator.MoveNext())
                                    {
                                        HtmlNode current = enumerator.Current;
                                        try
                                        {
                                            ++surfResult.nRanks;
                                            if (surfResult.nRanks > 10)
                                                surfResult.nRanks = 10;
                                            if (current.InnerText.Replace("&amp;", "&").Contains(contentSnipet.Replace("...", "")))
                                            {
                                                foreach (HtmlNode selectNode in (IEnumerable<HtmlNode>)current.SelectNodes(".//a"))
                                                {
                                                    string href2 = "";
                                                    try
                                                    {
                                                        href2 = selectNode.Attributes["href"].Value;
                                                    }
                                                    catch
                                                    {
                                                    }
                                                    if (!href2.StartsWith("/search?") && BrowserAgent.href_Contains_target(href2, target, wildcard, exttarget))
                                                    {
                                                        SettingManager.Logger(string.Format("click post"));
                                                        BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(selectNode.XPath)));
                                                        surfResult.IsSuccess = true;
                                                        flag2 = true;
                                                        break;
                                                    }
                                                }
                                                if (flag2)
                                                    break;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            SettingManager.Logger(string.Format("Exception 5: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        SettingManager.Logger(string.Format("Exception 1: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 14: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                }
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimImageSearch(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget)
        {
            SurfResult surfResult = new SurfResult();
            surfResult.nRanks = 0;
            HtmlDocument htmlDocument = new HtmlDocument();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            int num1 = -1;
            int num2 = -1;
            int num3 = 1;
            bool flag = true;
            List<HtmlNode> source1 = new List<HtmlNode>();
            int tickCount = Environment.TickCount;
            while (Environment.TickCount - tickCount <= 200000 && (BrowserAgent.WaitForPageLoding(_driver, "ires") || BrowserAgent.WaitForPageLoding(_driver, "main") || BrowserAgent.WaitForPageLoding(_driver, "yDmH0d")))
            {
                try
                {
                    htmlDocument.LoadHtml(_driver.PageSource);
                    HtmlNode documentNode = htmlDocument.DocumentNode;
                    if (num1 == 0 || num1 == -1)
                    {
                        int iNo = 0;
                        int startIndex1 = 0;
                        while (Environment.TickCount - tickCount <= 200000)
                        {
                            int startIndex2 = startIndex1 + 1;
                            int num4 = documentNode.InnerHtml.IndexOf("var ru='", startIndex2);
                            if (num4 > 0)
                            {
                                startIndex1 = num4 + 8;
                                int num5 = documentNode.InnerHtml.IndexOf("'", startIndex1);
                                if (num5 > 0)
                                {
                                    ++surfResult.nRanks;
                                    string href = documentNode.InnerHtml.Substring(startIndex1, num5 - startIndex1);
                                    SettingManager.Logger(string.Format("Imagesearch comparing 0: {0} {1}", (object)href, (object)target));
                                    if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                                    {
                                        IEnumerable<HtmlNode> source2 = documentNode.Descendants("img").Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["data-index"] != null && node.Attributes["data-index"].Value == iNo.ToString()));
                                        if (source2.Count<HtmlNode>() > 0)
                                        {
                                            BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(source2.ToList<HtmlNode>()[0].XPath)));
                                            Thread.Sleep(4000);
                                            IWebElement element = _driver.FindElement(By.Id("is_la"));
                                            if (element != null)
                                            {
                                                ((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].scrollIntoView(true);", (object)element);
                                                BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowUp);
                                                BrowserAgent.Click(_driver, element);
                                                surfResult.IsSuccess = true;
                                                return surfResult;
                                            }
                                            break;
                                        }
                                    }
                                    iNo++;
                                }
                                else
                                    break;
                            }
                            else
                                break;
                        }
                    }
                    if (num1 == 1 || num1 == -1)
                    {
                        surfResult.nRanks = 0;
                        foreach (HtmlNode htmlNode in documentNode.Descendants("div").Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["data-ri"] != null)))
                        {
                            int num6 = htmlNode.InnerHtml.IndexOf("ru\":\"");
                            if (num6 > 0)
                            {
                                int startIndex = num6 + 5;
                                int num7 = htmlNode.InnerHtml.IndexOf("\"", startIndex);
                                if (num7 > 0)
                                {
                                    string href = htmlNode.InnerHtml.Substring(startIndex, num7 - startIndex);
                                    ++surfResult.nRanks;
                                    SettingManager.Logger(string.Format("Imagesearch comparing 1: {0} {1}", (object)href, (object)target));
                                    if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                                    {
                                        IJavaScriptExecutor javaScriptExecutor = (IJavaScriptExecutor)_driver;
                                        IWebElement element1 = _driver.FindElement(By.XPath(htmlNode.XPath));
                                        javaScriptExecutor.ExecuteScript("arguments[0].scrollIntoView(true);", (object)element1);
                                        BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowUp);
                                        BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode.XPath)));
                                        Thread.Sleep(4000);
                                        htmlDocument.LoadHtml(_driver.PageSource);
                                        documentNode = htmlDocument.DocumentNode;
                                        IEnumerable<HtmlNode> source3 = documentNode.Descendants("a").Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["href"] != null && node.Attributes["href"].Value.Contains(target.Replace("https://", "").Replace("http://", ""))));
                                        if (source3.ToList<HtmlNode>().Count > 0)
                                        {
                                            IWebElement element2 = _driver.FindElement(By.XPath(source3.ToList<HtmlNode>()[0].XPath));
                                            javaScriptExecutor.ExecuteScript("arguments[0].scrollIntoView(true);", (object)element2);
                                            BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowUp);
                                            _driver.Navigate().GoToUrl(target);
                                            surfResult.IsSuccess = true;
                                            return surfResult;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    source1.Clear();
                    surfResult.nRanks = (num3 - 1) * 20;
                    try
                    {
                        source1.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='search']//div[@id='ires']//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    try
                    {
                        source1.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//body[@id='yDmH0d']//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    BrowserAgent.RandomScroll(_driver);
                    if (source1.Count<HtmlNode>() > 0)
                    {
                        foreach (HtmlNode htmlNode in source1)
                        {
                            ++surfResult.nRanks;
                            string href = "";
                            if (htmlNode.Attributes["href"] != null)
                            {
                                try
                                {
                                    href = htmlNode.Attributes["href"].Value;
                                }
                                catch
                                {
                                }
                                if (!href.StartsWith("/search?"))
                                {
                                    SettingManager.Logger(string.Format("Imagesearch comparing 2: {0} {1}", (object)href, (object)target));
                                    if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                                    {
                                        ((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].scrollIntoView(true);", (object)_driver.FindElement(By.XPath(htmlNode.XPath)));
                                        BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowUp);
                                        BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode.XPath)));
                                        surfResult.IsSuccess = true;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else
                        break;
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 16: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                    surfResult.FailReason = 2;
                    break;
                }
                if (flag)
                {
                    num1 = -1;
                    ++num3;
                    try
                    {
                        BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.End);
                        if (num2 == 0 || num2 == -1)
                        {
                            try
                            {
                                IWebElement element = _driver.FindElement(By.XPath("//a[@id='pnnext']"));
                                if (element != null)
                                {
                                    BrowserAgent.Click(_driver, element);
                                    num2 = 0;
                                }
                            }
                            catch
                            {
                            }
                        }
                        if (num2 == 1 || num2 == -1)
                        {
                            try
                            {
                                IWebElement element = _driver.FindElement(By.XPath("//a[text()='" + num3.ToString() + "' and contains(@class,'fl')]"));
                                if (element != null)
                                {
                                    BrowserAgent.Click(_driver, element);
                                    num2 = 1;
                                }
                            }
                            catch
                            {
                            }
                        }
                        if (num2 == 2 || num2 == -1)
                        {
                            try
                            {
                                IWebElement element = _driver.FindElement(By.XPath("//a[@jsname='oHxHid']"));
                                if (element != null)
                                {
                                    BrowserAgent.Click(_driver, element);
                                    num2 = 2;
                                }
                            }
                            catch
                            {
                            }
                        }
                        if (num2 != 3)
                        {
                            if (num2 != -1)
                                goto label_63;
                        }
                        try
                        {
                            IWebElement element = _driver.FindElement(By.XPath("//a[@aria-label='Page " + num3.ToString() + "']"));
                            if (element != null)
                            {
                                BrowserAgent.Click(_driver, element);
                                num2 = 3;
                            }
                        }
                        catch
                        {
                        }
                    }
                    catch (Exception ex)
                    {
                        SettingManager.Logger(string.Format("Exception 17: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                        break;
                    }
                label_63:
                    Thread.Sleep(2000);
                }
                else
                    break;
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimVideoSearch(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget)
        {
            SurfResult surfResult = new SurfResult();
            surfResult.nRanks = 0;
            HtmlDocument htmlDocument = new HtmlDocument();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            int num1 = -1;
            int num2 = -1;
            int num3 = 1;
            bool flag = true;
            List<HtmlNode> source1 = new List<HtmlNode>();
            int tickCount = Environment.TickCount;
            while (Environment.TickCount - tickCount <= 200000 && (BrowserAgent.WaitForPageLoding(_driver, "ires") || BrowserAgent.WaitForPageLoding(_driver, "main") || BrowserAgent.WaitForPageLoding(_driver, "yDmH0d")))
            {
                try
                {
                    htmlDocument.LoadHtml(_driver.PageSource);
                    HtmlNode documentNode = htmlDocument.DocumentNode;
                    if (num1 == 0 || num1 == -1)
                    {
                        int iNo = 0;
                        int startIndex1 = 0;
                        while (Environment.TickCount - tickCount <= 200000)
                        {
                            int startIndex2 = startIndex1 + 1;
                            int num4 = documentNode.InnerHtml.IndexOf("var ru='", startIndex2);
                            if (num4 > 0)
                            {
                                startIndex1 = num4 + 8;
                                int num5 = documentNode.InnerHtml.IndexOf("'", startIndex1);
                                if (num5 > 0)
                                {
                                    ++surfResult.nRanks;
                                    string href = documentNode.InnerHtml.Substring(startIndex1, num5 - startIndex1);
                                    SettingManager.Logger(string.Format("Videosearch comparing 0: {0} {1}", (object)href, (object)target));
                                    if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                                    {
                                        IEnumerable<HtmlNode> source2 = documentNode.Descendants("img").Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["data-index"] != null && node.Attributes["data-index"].Value == iNo.ToString()));
                                        if (source2.Count<HtmlNode>() > 0)
                                        {
                                            BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(source2.ToList<HtmlNode>()[0].XPath)));
                                            Thread.Sleep(4000);
                                            IWebElement element = _driver.FindElement(By.Id("is_la"));
                                            if (element != null)
                                            {
                                                ((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].scrollIntoView(true);", (object)element);
                                                BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowUp);
                                                BrowserAgent.Click(_driver, element);
                                                surfResult.IsSuccess = true;
                                                return surfResult;
                                            }
                                            break;
                                        }
                                    }
                                    iNo++;
                                }
                                else
                                    break;
                            }
                            else
                                break;
                        }
                    }
                    if (num1 == 1 || num1 == -1)
                    {
                        surfResult.nRanks = 0;
                        foreach (HtmlNode htmlNode in documentNode.Descendants("div").Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["data-ri"] != null)))
                        {
                            int num6 = htmlNode.InnerHtml.IndexOf("ru\":\"");
                            if (num6 > 0)
                            {
                                int startIndex = num6 + 5;
                                int num7 = htmlNode.InnerHtml.IndexOf("\"", startIndex);
                                if (num7 > 0)
                                {
                                    string href = htmlNode.InnerHtml.Substring(startIndex, num7 - startIndex);
                                    ++surfResult.nRanks;
                                    SettingManager.Logger(string.Format("Videosearch comparing 1: {0} {1}", (object)href, (object)target));
                                    if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                                    {
                                        IJavaScriptExecutor javaScriptExecutor = (IJavaScriptExecutor)_driver;
                                        IWebElement element1 = _driver.FindElement(By.XPath(htmlNode.XPath));
                                        javaScriptExecutor.ExecuteScript("arguments[0].scrollIntoView(true);", (object)element1);
                                        BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowUp);
                                        BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode.XPath)));
                                        Thread.Sleep(4000);
                                        htmlDocument.LoadHtml(_driver.PageSource);
                                        documentNode = htmlDocument.DocumentNode;
                                        IEnumerable<HtmlNode> source3 = documentNode.Descendants("a").Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["href"] != null && node.Attributes["href"].Value.Contains(target.Replace("https://", "").Replace("http://", ""))));
                                        if (source3.ToList<HtmlNode>().Count > 0)
                                        {
                                            IWebElement element2 = _driver.FindElement(By.XPath(source3.ToList<HtmlNode>()[0].XPath));
                                            javaScriptExecutor.ExecuteScript("arguments[0].scrollIntoView(true);", (object)element2);
                                            BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowUp);
                                            _driver.Navigate().GoToUrl(target);
                                            surfResult.IsSuccess = true;
                                            return surfResult;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    source1.Clear();
                    surfResult.nRanks = (num3 - 1) * 20;
                    try
                    {
                        source1.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='main']//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    try
                    {
                        source1.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='ires']//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    try
                    {
                        source1.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//body[@id='yDmH0d']//a").ToList<HtmlNode>());
                    }
                    catch
                    {
                    }
                    BrowserAgent.RandomScroll(_driver);
                    if (source1.Count<HtmlNode>() > 0)
                    {
                        foreach (HtmlNode htmlNode in source1)
                        {
                            ++surfResult.nRanks;
                            string href = "";
                            if (htmlNode.Attributes["href"] != null)
                            {
                                try
                                {
                                    href = htmlNode.Attributes["href"].Value;
                                }
                                catch
                                {
                                }
                                if (!href.StartsWith("/search?"))
                                {
                                    SettingManager.Logger(string.Format("Videosearch comparing 2: {0} {1}", (object)href, (object)target));
                                    if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                                    {
                                        ((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].scrollIntoView(true);", (object)_driver.FindElement(By.XPath(htmlNode.XPath)));
                                        BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowUp);
                                        BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode.XPath)));
                                        surfResult.IsSuccess = true;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else
                        break;
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 18: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                    surfResult.FailReason = 2;
                    break;
                }
                if (flag)
                {
                    num1 = -1;
                    ++num3;
                    try
                    {
                        BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.End);
                        if (num2 == 0 || num2 == -1)
                        {
                            try
                            {
                                IWebElement element = _driver.FindElement(By.XPath("//a[@id='pnnext']"));
                                if (element != null)
                                {
                                    BrowserAgent.Click(_driver, element);
                                    num2 = 0;
                                }
                            }
                            catch
                            {
                            }
                        }
                        if (num2 == 1 || num2 == -1)
                        {
                            try
                            {
                                IWebElement element = _driver.FindElement(By.XPath("//a[text()='" + num3.ToString() + "' and contains(@class,'fl')]"));
                                if (element != null)
                                {
                                    BrowserAgent.Click(_driver, element);
                                    num2 = 1;
                                }
                            }
                            catch
                            {
                            }
                        }
                        if (num2 == 2 || num2 == -1)
                        {
                            try
                            {
                                IWebElement element = _driver.FindElement(By.XPath("//a[@jsname='oHxHid']"));
                                if (element != null)
                                {
                                    BrowserAgent.Click(_driver, element);
                                    num2 = 2;
                                }
                            }
                            catch
                            {
                            }
                        }
                        if (num2 != 3)
                        {
                            if (num2 != -1)
                                goto label_66;
                        }
                        try
                        {
                            IWebElement element = _driver.FindElement(By.XPath("//a[@aria-label='Page " + num3.ToString() + "']"));
                            if (element != null)
                            {
                                BrowserAgent.Click(_driver, element);
                                num2 = 3;
                            }
                        }
                        catch
                        {
                        }
                    }
                    catch (Exception ex)
                    {
                        SettingManager.Logger(string.Format("Exception 19: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                        break;
                    }
                label_66:
                    Thread.Sleep(2000);
                }
                else
                    break;
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimYoutubeSearch(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget)
        {
            SurfResult surfResult = new SurfResult();
            surfResult.nRanks = 0;
            HtmlDocument htmlDocument = new HtmlDocument();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            int num1 = -1;
            int num2 = -1;
            int num3 = 1;
            bool flag = true;
            List<HtmlNode> source = new List<HtmlNode>();
            int tickCount = Environment.TickCount;
            while (Environment.TickCount - tickCount <= 200000)
            {
                if (BrowserAgent.WaitForPageLoding(_driver, "content"))
                {
                    try
                    {
                        htmlDocument.LoadHtml(_driver.PageSource);
                        HtmlNode documentNode = htmlDocument.DocumentNode;
                        source.Clear();
                        surfResult.nRanks = (num3 - 1) * 20;
                        try
                        {
                            source.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//a[contains(@href,'watch')]").ToList<HtmlNode>());
                        }
                        catch
                        {
                        }
                        try
                        {
                            source.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='ires']//a").ToList<HtmlNode>());
                        }
                        catch
                        {
                        }
                        try
                        {
                            source.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//body[@id='yDmH0d']//a").ToList<HtmlNode>());
                        }
                        catch
                        {
                        }
                        BrowserAgent.RandomScroll(_driver);
                        if (source.Count<HtmlNode>() > 0)
                        {
                            foreach (HtmlNode htmlNode in source)
                            {
                                ++surfResult.nRanks;
                                string href = "";
                                if (htmlNode.Attributes["href"] != null)
                                {
                                    try
                                    {
                                        href = htmlNode.Attributes["href"].Value;
                                    }
                                    catch
                                    {
                                    }
                                    if (!href.StartsWith("/search?"))
                                    {
                                        SettingManager.Logger(string.Format("YoutubeSearch comparing 2: {0} {1}", (object)href, (object)target));
                                        string target1 = target.Substring(target.IndexOf("v="));
                                        string exttarget1 = "";
                                        if (exttarget != null)
                                            exttarget1 = exttarget.Substring(exttarget.IndexOf("v="));
                                        if (BrowserAgent.href_Contains_target(href, target1, false, exttarget1))
                                        {
                                            ((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].scrollIntoView(true);", (object)_driver.FindElement(By.XPath(htmlNode.XPath)));
                                            BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.ArrowUp);
                                            BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode.XPath)));
                                            surfResult.IsSuccess = true;
                                            flag = false;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        else
                            break;
                    }
                    catch (Exception ex)
                    {
                        SettingManager.Logger(string.Format("Exception 20: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                        surfResult.FailReason = 2;
                        break;
                    }
                    if (flag)
                    {
                        num1 = -1;
                        ++num3;
                        try
                        {
                            BrowserAgent.SendKeys(_driver.FindElement(By.TagName("body")), Keys.End);
                            if (num2 != 1)
                            {
                                if (num2 != -1)
                                    goto label_35;
                            }
                            try
                            {
                                IWebElement element = _driver.FindElement(By.XPath("//a[text()='" + num3.ToString() + "' and contains(@class,'yt-uix-button')]"));
                                if (element != null)
                                {
                                    ((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].click();", (object)element);
                                    BrowserAgent.Click(_driver, element);
                                    num2 = 1;
                                }
                            }
                            catch (Exception ex)
                            {
                                SettingManager.Logger(string.Format("Exception 21: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                            }
                        }
                        catch (Exception ex)
                        {
                            SettingManager.Logger(string.Format("Exception 22: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                            break;
                        }
                    label_35:
                        Thread.Sleep(2000);
                    }
                    else
                        break;
                }
                else
                    break;
            }
            return surfResult;
        }

        public static async Task<SurfResult> OpenManheimCustomSearch(
          IWebDriver _driver,
          string target,
          bool wildcard,
          string exttarget)
        {
            SurfResult surfResult = new SurfResult();
            surfResult.IsSuccess = false;
            surfResult.IsGoogle = false;
            HtmlDocument htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(_driver.PageSource);
            HtmlNode documentNode = htmlDocument.DocumentNode;
            List<HtmlNode> htmlNodeList = new List<HtmlNode>();
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[contains(@class,'knowledge-panel')]//a[contains(@class,'ab_button')]").ToList<HtmlNode>());
            }
            catch
            {
            }
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[contains(@class,'hp-xpdbox')]//a[contains(@class,'fl')]").ToList<HtmlNode>());
            }
            catch
            {
            }
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[contains(@class,'xpdbox')]//a[@class='lua-button']").ToList<HtmlNode>());
            }
            catch
            {
            }
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='main']//div[contains(@class,'xpd')]//div//div//div//a").ToList<HtmlNode>());
            }
            catch
            {
            }
            try
            {
                htmlNodeList.AddRange((IEnumerable<HtmlNode>)documentNode.SelectNodes("//div[@id='cse']//div[contains(@class,'gs-title')]//a").ToList<HtmlNode>());
            }
            catch
            {
            }
            BrowserAgent.RandomScroll(_driver);
            foreach (HtmlNode htmlNode in htmlNodeList)
            {
                try
                {
                    ++surfResult.nRanks;
                    if (surfResult.nRanks > 10)
                        surfResult.nRanks = 10;
                    string href = "";
                    try
                    {
                        href = htmlNode.Attributes["href"].Value;
                    }
                    catch
                    {
                    }
                    if (!href.StartsWith("/search?"))
                    {
                        if (BrowserAgent.href_Contains_target(href, target, wildcard, exttarget))
                        {
                            BrowserAgent.Click(_driver, _driver.FindElement(By.XPath(htmlNode.XPath)), true);
                            surfResult.IsSuccess = true;
                            break;
                        }
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 23: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                }
            }
            return surfResult;
        }

        public static async Task<bool> SolveCaptcha(IWebDriver driver)
        {
            if (driver.PageSource.Contains("recaptcha"))
            {
                IWebElement element = driver.FindElement(By.XPath("//div[@id='recaptcha']"));
                if (element != null)
                {
                    string attribute = element.GetAttribute("data-sitekey");
                    string url = driver.Url;
                    string str = await BrowserAgent.trySolvingCaptcha(attribute, driver.Url);
                    if (string.IsNullOrEmpty(str))
                        return false;
                    ((IJavaScriptExecutor)driver).ExecuteScript(string.Format("document.getElementById('g-recaptcha-response').value ='{0}'", (object)str));
                    driver.FindElement(By.XPath("//input[@name='continue']")).Submit();
                }
            }
            return true;
        }

        public static async Task<string> trySolvingCaptcha(string siteKey, string pageUrl)
        {
            string verifyCode = string.Empty;
            HttpClient httpClient = new HttpClient();
            try
            {
                HttpResponseMessage async1 = await httpClient.GetAsync(string.Format("http://2captcha.com/in.php?key={0}&method=userrecaptcha&googlekey={1}&pageurl={2}", (object)"6d3db9202bb14964daa065fc7976a307", (object)siteKey, (object)pageUrl));
                async1.EnsureSuccessStatusCode();
                string result = async1.Content.ReadAsStringAsync().Result;
                if (string.IsNullOrEmpty(result) || !result.Contains("OK|"))
                    return verifyCode;
                string str1 = result.Replace("OK|", string.Empty);
                if (string.IsNullOrEmpty(str1))
                    return verifyCode;
                string verifyUrl = string.Format("http://2captcha.com/res.php?key={0}&action=get&id={1}", (object)"6d3db9202bb14964daa065fc7976a307", (object)str1);
                int requestCount = 0;
                while (requestCount < 15)
                {
                    Thread.Sleep(15000);
                    ++requestCount;
                    HttpResponseMessage async2 = await httpClient.GetAsync(verifyUrl);
                    async2.EnsureSuccessStatusCode();
                    string str2 = await async2.Content.ReadAsStringAsync();
                    if (!string.IsNullOrEmpty(str2) && (str2.Contains("OK|") || !str2.Contains("CAPCHA_NOT_READY")))
                    {
                        verifyCode = str2.Replace("OK|", string.Empty);
                        break;
                    }
                }
                return verifyCode;
            }
            catch (Exception ex)
            {
                SettingManager.Logger(string.Format("Exception 24: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                return verifyCode;
            }
        }

        public static bool WaitForPageLoding(IWebDriver _driver, string elem_id, bool IsID = true, int sec = 10)
        {
            bool flag = true;
            try
            {
                WebDriverWait webDriverWait = new WebDriverWait(_driver, TimeSpan.FromSeconds((double)sec));
                if (IsID)
                    webDriverWait.Until<IWebElement>(ExpectedConditions.ElementIsVisible(By.Id(elem_id)));
                else
                    webDriverWait.Until<IWebElement>(ExpectedConditions.ElementIsVisible(By.Name(elem_id)));
            }
            catch
            {
                flag = false;
            }
            return flag;
        }

        public static bool WaitForPageLodingByDivClass(IWebDriver _driver, string elem_id)
        {
            bool flag = true;
            try
            {
                new WebDriverWait(_driver, TimeSpan.FromSeconds(10.0)).Until<IWebElement>(ExpectedConditions.ElementIsVisible(By.XPath("//div[contains(@class,'" + elem_id + "')]")));
            }
            catch
            {
                flag = false;
            }
            return flag;
        }

        public static IConfiguration Configuration { get; }

        public static IWebDriver _driver
        {
            get
            {
                Thread.Sleep(500);
                return BrowserAgent.driver;
            }
            set => BrowserAgent.driver = value;
        }

        public static bool isAlertPresent(IWebDriver _driver)
        {
            try
            {
                _driver.SwitchTo().Alert();
                return true;
            }
            catch (NoAlertPresentException ex)
            {
                return false;
            }
        }

        public static async Task<log> worker_DoWork(params object[] arguments)
        {
            Random rnd = new Random();
            trafficjob job = arguments[0] as trafficjob;
            log resultlog = new log();
            resultlog.job_id = job.id;
            resultlog.record_time = DateTime.Now;
            string str1 = arguments[1] == null ? "" : arguments[1].ToString();
            string agent = arguments[2] == null ? "" : arguments[2].ToString();
            string _proxy = arguments[3] == null ? "" : arguments[3].ToString();
            string agent_desc = arguments[4] == null ? "" : arguments[4].ToString();
            List<location> lcts = new List<location>();
            if (arguments[5] != null)
                lcts = arguments[5] as List<location>;
            string lct = arguments[6] == null ? "" : arguments[6].ToString();
            if (lct != "")
                lct = lct.Substring(0, lct.Length - 1);
            string target = job.target_url;
            string keyword = BrowserAgent.SpinSearchTerm(job.search_term, rnd.Next(0, 100));
            string namebusiness = job.name_business;
            string job_name = job.job_name;
            string SelJourney = job.journey_option;
            string wholesearchterm = job.search_term;
            string exttarget = job.exttarget_url;
            string FormFields = job.form_fields;
            string JourneyURL = job.journey_url;
            string SnippetContent = job.snippet_content;
            bool wildcard = job.wild_card;
            bool impressions = job.impressions;
            bool cookies_site = job.cookie_website;
            string Location_str = job.location;
            if (SelJourney.IndexOf("T1") >= 0 || SelJourney.IndexOf("T2") >= 0)
                keyword = BrowserAgent.SpinT1SearchTermBusiness(job.search_term, job.name_business, out namebusiness, rnd.Next(0, 100));
            string realPublicIp = "";
            SettingManager.Logger(string.Format("journey started: {0}", (object)job_name));
            string windowSize = "0x0";
            BrowserAgent._driver = (IWebDriver)null;
            SurfResult surfresult = new SurfResult();
            string currentDirectory = Directory.GetCurrentDirectory();
            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
            FirefoxOptions options = new FirefoxOptions()
            {
                Profile = new FirefoxProfile()
                {
                    DeleteAfterUse = true
                }
            };
            SettingManager.Logger(string.Format("journey start agent: {0}", (object)agent));
            options.AddArgument("--user-agent=");
            if (job.googlemaplocal)
            {
                options.SetPreference("geo.enabled", true);
                options.SetPreference("geo.provider.use_corelocation", true);
                options.SetPreference("geo.prompt.testing", true);
                options.SetPreference("geo.prompt.testing.allow", true);
                try
                {
                    List<string> source1 = new List<string>();
                    foreach (string str2 in job.googlemaplist.Split(';', StringSplitOptions.None))
                    {
                        if (!string.IsNullOrEmpty(str2.Trim()))
                            source1.Add(str2.Trim());
                    }
                    if (source1.Count<string>() > 0)
                    {
                        int index = rnd.Next(0, source1.Count<string>() - 1);
                        string str3 = source1[index];
                        if (!string.IsNullOrEmpty(str3.Trim()))
                        {
                            string[] source2 = str3.Split(',', StringSplitOptions.None);
                            if (((IEnumerable<string>)source2).Count<string>() == 2)
                                options.SetPreference("geo.wifi.uri", string.Format("data:application/json , {{ \"status\": \"OK\", \"accuracy\": 100.0, \"location\": {{ \"lat\": {0}, \"lng\": {1} }} }}", (object)source2[0], (object)source2[1]));
                        }
                    }
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception Geo: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                }
            }
            if (_proxy.Length > 0)
                options.Profile.SetProxyPreferences(new Proxy()
                {
                    HttpProxy = _proxy,
                    FtpProxy = _proxy,
                    SslProxy = _proxy
                });
            HtmlDocument htmlDocument = new HtmlDocument();
            try
            {
                BrowserAgent._driver = (IWebDriver)new FirefoxDriver(currentDirectory, options);
                Thread.Sleep(2000);
                try
                {
                    Process.Start(Directory.GetCurrentDirectory() + "\\auth.exe");
                }
                catch (Exception ex)
                {
                }
                Thread.Sleep(1000);
                int w;
                int h;
                windowSize = BrowserAgent.SpinSize(out w, out h);
                try
                {
                    BrowserAgent._driver.Manage().Window.Size = new Size(w, h);
                    MatchCollection source = (MatchCollection)null;
                    int num = 10;
                    while (num > 0)
                    {
                        --num;
                        try
                        {
                            Process.Start(Directory.GetCurrentDirectory() + "\\auth.exe");
                        }
                        catch (Exception ex)
                        {
                        }
                        BrowserAgent._driver.Navigate().GoToUrl("https://api.ipify.org");
                        try
                        {
                            Process.Start(Directory.GetCurrentDirectory() + "\\auth.exe");
                        }
                        catch (Exception ex)
                        {
                        }
                        new WebDriverWait(BrowserAgent._driver, TimeSpan.FromSeconds(30.0)).Until<IWebElement>(ExpectedConditions.ElementIsVisible(By.TagName("body")));
                        htmlDocument.LoadHtml(BrowserAgent._driver.PageSource);
                        source = new Regex("\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b").Matches(htmlDocument.DocumentNode.SelectSingleNode("//body").InnerText);
                        if (((IEnumerable<Match>)source).Count<Match>() <= 0)
                            Thread.Sleep(4000);
                        else
                            break;
                    }
                    string query = str1;
                    if (source != null && source.Count > 0)
                    {
                        realPublicIp = source[0].ToString();
                        int nTryCount = 0;
                        IJavaScriptExecutor driver = (IJavaScriptExecutor)BrowserAgent._driver;
                        bool flag;
                        do
                        {
                            ++nTryCount;
                            flag = false;
                            if (nTryCount > 3)
                                throw new Exception();
                            if (cookies_site)
                            {
                                string[] strArray = File.ReadAllLines(Directory.GetCurrentDirectory() + "/cookies.txt");
                                int index = new Random().Next(0, strArray.Length - 1);
                                string url = strArray[index];
                                BrowserAgent._driver.Navigate().GoToUrl(url);
                                BrowserAgent.RandomScroll(BrowserAgent._driver);
                            }
                            if (SelJourney.StartsWith("ImageSearch"))
                                query += "/imghp?tbm=isch&source=og&tab=wi";
                            else if (SelJourney.StartsWith("VideoSearch"))
                                query += "/videohp?tbm=vid&source=lmns";
                            else if (SelJourney.StartsWith("YoutubeSearch"))
                                query = "https://www.youtube.com";
                            else if (SelJourney.StartsWith("CustomSearch"))
                                query = "https://cse.google.com/cse?cx=002055897534339088782:ebixg0-9im0";
                            else if (SelJourney.StartsWith("Direct") || SelJourney.StartsWith("Optimus") || SelJourney.StartsWith("G - Site") || SelJourney.StartsWith("Mymap with that function"))
                            {
                                query = wholesearchterm;
                                keyword = query;
                            }
                            else if (SelJourney.StartsWith("T2") || SelJourney.StartsWith("T1 Company"))
                                query = namebusiness;
                            BrowserAgent._driver.Navigate().GoToUrl(query);
                            if (BrowserAgent._driver.PageSource.Contains("L2AGLb"))
                            {
                                BrowserAgent.Click(BrowserAgent._driver, BrowserAgent._driver.FindElement(By.Id("L2AGLb")));
                                Thread.Sleep(2000);
                            }
                            if (SelJourney.StartsWith("Direct"))
                            {
                                if (!BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "ires") && !BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "main", sec: 1) && !BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "yDmH0d", sec: 1) && !BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "cse", sec: 1) && !BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "content", sec: 1) && !BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "b_results", sec: 1))
                                {
                                    try
                                    {
                                        SettingManager.Logger(string.Format("Clicking button processing captcha"));
                                        if (!await BrowserAgent.SolveCaptcha(BrowserAgent._driver))
                                            throw new Exception();
                                        continue;
                                    }
                                    catch (Exception ex)
                                    {
                                        SettingManager.Logger(string.Format("Exception 25: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                                        flag = true;
                                    }
                                }
                            }
                            else if (!SelJourney.StartsWith("Optimus") && !SelJourney.StartsWith("T2") && !SelJourney.StartsWith("T1 Company") && !SelJourney.StartsWith("G - Site") && !SelJourney.StartsWith("Normal + Location") && !SelJourney.StartsWith("Mymap with that function"))
                            {
                                if (SelJourney.StartsWith("CustomSearch"))
                                {
                                    if (BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "search", false))
                                        BrowserAgent.TypeLikeHuman(BrowserAgent._driver, BrowserAgent._driver.FindElement(By.Name("search")), keyword);
                                }
                                else if (SelJourney.StartsWith("YoutubeSearch"))
                                {
                                    if (BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "content"))
                                        BrowserAgent.TypeLikeHuman(BrowserAgent._driver, BrowserAgent._driver.FindElement(By.XPath("//input[contains(@name,'search_query')]")), keyword);
                                }
                                else if (SelJourney.StartsWith("Super G-Site"))
                                {
                                    if (BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "q", false))
                                    {
                                        BrowserAgent.TypeLikeHuman(BrowserAgent._driver, BrowserAgent._driver.FindElement(By.Name("q")), target);
                                        break;
                                    }
                                }
                                else if (BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "q", false))
                                    BrowserAgent.TypeLikeHuman(BrowserAgent._driver, BrowserAgent._driver.FindElement(By.Name("q")), keyword);
                            }
                            else
                                break;
                            SettingManager.Logger(string.Format("After Enter Keyword"));
                            if (!BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "ires") && !BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "main", sec: 1) && !BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "yDmH0d", sec: 1) && !BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "cse", sec: 1) && !BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "content", sec: 1) && !BrowserAgent.WaitForPageLoding(BrowserAgent._driver, "b_results", sec: 1))
                            {
                                try
                                {
                                    SettingManager.Logger(string.Format("Clicking button processing captcha"));
                                    if (!await BrowserAgent.SolveCaptcha(BrowserAgent._driver))
                                        throw new Exception();
                                    continue;
                                }
                                catch (Exception ex)
                                {
                                    SettingManager.Logger(string.Format("Exception 25: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                                    flag = true;
                                }
                            }
                            Thread.Sleep(6000);
                            if (!SelJourney.StartsWith("YoutubeSearch") && !SelJourney.StartsWith("CustomSearch") && !SelJourney.StartsWith("Direct") && !SelJourney.StartsWith("Optimus"))
                            {
                                string str4 = HttpUtility.UrlDecode(BrowserAgent._driver.Url);
                                foreach (string str5 in keyword.Split(' ', StringSplitOptions.None))
                                {
                                    if (!string.IsNullOrEmpty(str5.Trim()) && str4.IndexOf(str5.Trim(), StringComparison.OrdinalIgnoreCase) < 0)
                                    {
                                        flag = true;
                                        break;
                                    }
                                }
                                SettingManager.Logger(string.Format("check if opend url contains keyword url:{0} result :{1}", (object)str4, (object)flag));
                            }
                            SettingManager.Logger(string.Format("After Clicking button: {0} nTryCount: {1}", (object)flag, (object)nTryCount));
                        }
                        while (flag);
                        if (!query.Contains("google.dk"))
                            BrowserAgent.ClickChangeToEnglish(BrowserAgent._driver);
                        if (job.googlemaplocal)
                            BrowserAgent.ClickUpdateLocation(BrowserAgent._driver);
                        SettingManager.Logger(string.Format("SelJourney Before : {0}", (object)SelJourney));
                        switch (SelJourney)
                        {
                            case "":
                            case "Direct (Google)":
                            case "Direct (Google) with Google Form":
                            case "Normal":
                            case "Normal with Google Form":
                                surfresult = await BrowserAgent.OpenManheim(BrowserAgent._driver, target, wildcard, exttarget, impressions);
                                break;
                            case "Brand":
                            case "Brand with Google Form":
                                surfresult = await BrowserAgent.OpenManheimForBrand(BrowserAgent._driver, target, wildcard, exttarget, namebusiness, impressions);
                                break;
                            case "Company":
                            case "Company with Google Form":
                                surfresult = await BrowserAgent.OpenManheimForCompany(BrowserAgent._driver, target, wildcard, exttarget, namebusiness);
                                break;
                            case "CustomSearch":
                            case "CustomSearch with Google Form":
                                surfresult = await BrowserAgent.OpenManheimCustomSearch(BrowserAgent._driver, target, wildcard, exttarget);
                                break;
                            case "Direct (Any)":
                                surfresult = await BrowserAgent.OpenManheimForDirectFree(BrowserAgent._driver, target, wildcard, exttarget);
                                break;
                            case "Direct Product":
                                surfresult = await BrowserAgent.OpenManheimForDirectProduct(BrowserAgent._driver, target, wildcard, exttarget);
                                break;
                            case "G - Site":
                                surfresult = await BrowserAgent.OpenManheimGsite(BrowserAgent._driver, target, wildcard, exttarget);
                                break;
                            case "GMB":
                            case "GMB with Google Form":
                                surfresult = await BrowserAgent.OpenManheimForGMB(BrowserAgent._driver, target, wildcard, exttarget, namebusiness);
                                break;
                            case "ImageSearch":
                            case "ImageSearch with Google Form":
                                surfresult = await BrowserAgent.OpenManheimImageSearch(BrowserAgent._driver, target, wildcard, exttarget);
                                break;
                            case "Knowledge":
                            case "Knowledge with Google Form":
                            case "Optimus":
                            case "Optimus with Google Form":
                                surfresult = await BrowserAgent.OpenManheimForKnowledge(BrowserAgent._driver, target, wildcard, exttarget);
                                break;
                            case "Mymap with that function":
                                surfresult = await BrowserAgent.OpenMymapSearch(BrowserAgent._driver, target, wildcard, exttarget);
                                break;
                            case "Normal + Location":
                                surfresult = await BrowserAgent.OpenManheimLocation(BrowserAgent._driver, keyword, target, wildcard, exttarget, lcts, lct);
                                break;
                            case "Normal Brand":
                            case "Normal Brand with Google Form":
                                surfresult = await BrowserAgent.OpenManheimNormalBrand(BrowserAgent._driver, target, wildcard, exttarget, impressions);
                                break;
                            case "Spike":
                                surfresult = await BrowserAgent.OpenSpike(BrowserAgent._driver, target, wildcard, exttarget, namebusiness);
                                break;
                            case "Super G-Site":
                                surfresult = await BrowserAgent.OpenManheimSuperGsite(BrowserAgent._driver, target, wildcard, exttarget, keyword, Location_str, namebusiness);
                                break;
                            case "T1":
                            case "T1 with Google Form":
                                surfresult = await BrowserAgent.OpenManheimForT1(BrowserAgent._driver, target, wildcard, exttarget, namebusiness);
                                break;
                            case "T1 Company":
                                surfresult = await BrowserAgent.OpenManheimForT2toT1(BrowserAgent._driver, target, wildcard, exttarget, keyword, 1, SnippetContent);
                                break;
                            case "T1 Google News":
                            case "T1 Google News with Google Form":
                                surfresult = await BrowserAgent.OpenManheimForT1GoogleNews(BrowserAgent._driver, target, wildcard, exttarget, namebusiness);
                                break;
                            case "T2 to T1":
                            case "T2 to T1 with Google Form":
                                surfresult = await BrowserAgent.OpenManheimForT2toT1(BrowserAgent._driver, target, wildcard, exttarget, keyword, 0, SnippetContent);
                                break;
                            case "VideoSearch":
                                surfresult = await BrowserAgent.OpenManheimVideoSearch(BrowserAgent._driver, target, wildcard, exttarget);
                                break;
                            case "YoutubeSearch":
                                surfresult = await BrowserAgent.OpenManheimYoutubeSearch(BrowserAgent._driver, target, wildcard, exttarget);
                                break;
                        }
                    }
                    else
                    {
                        surfresult.IsSuccess = false;
                        surfresult.FailReason = 1;
                    }
                    query = (string)null;
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 27: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                    surfresult.IsSuccess = false;
                    surfresult.FailReason = 1;
                }
                if (surfresult.IsSuccess)
                {
                    if (job.name_business != "Get Directions")
                    {
                        Thread.Sleep(10000);
                        new WebDriverWait(BrowserAgent._driver, TimeSpan.FromSeconds(10.0)).Until<bool>((Func<IWebDriver, bool>)(d => ((IJavaScriptExecutor)d).ExecuteScript("return document.readyState").Equals((object)"complete")));
                        if (SelJourney.StartsWith("VideoSearch"))
                        {
                            Thread.Sleep(rnd.Next(300000, 900000));
                        }
                        else
                        {
                            if (!impressions)
                                BrowserAgent.ReduceBounceRate(BrowserAgent._driver, target);
                            BrowserAgent.SendForm(BrowserAgent._driver, job_name, SelJourney, JourneyURL, FormFields);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                SettingManager.Logger(string.Format("Exception 28: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
            }
            SettingManager.Logger(string.Format("SelJourney End"));
            resultlog.search = CustomAttributeExtensions.GetCustomAttribute<DisplayAttribute>((MemberInfo)job.search_engine.GetType().GetField(job.search_engine.ToString())).Name;
            resultlog.keyword = keyword;
            resultlog.agent = "(" + agent_desc + ") " + agent;
            resultlog.proxy = _proxy;
            resultlog.ip = realPublicIp;
            resultlog.size = windowSize;
            resultlog.result = surfresult.IsSuccess;
            if (!surfresult.IsSuccess)
            {
                surfresult.nRanks = 0;
                if (surfresult.FailReason == 0)
                    surfresult.FailReason = 3;
            }
            resultlog.failreason = surfresult.FailReason;
            resultlog.brandkind = surfresult.nBrandKind;
            if (surfresult.nRanks == 0)
                surfresult.nRanks = rnd.Next(1, 30);
            resultlog.ranks = surfresult.nRanks;
            SettingManager.Logger(string.Format("journey ended: {0}", (object)job_name));
            try
            {
                if (BrowserAgent._driver != null)
                {
                    BrowserAgent._driver.Close();
                    BrowserAgent._driver.Quit();
                }
            }
            catch
            {
            }
            foreach (Process process in Process.GetProcessesByName("firefox"))
            {
                try
                {
                    process.Kill();
                }
                catch
                {
                }
            }
            BrowserAgent.JobBrowser[(object)job_name] = (object)null;
            SettingManager.Logger(string.Format("journey finished: {0} ", (object)job_name));
            log log = resultlog;
            rnd = (Random)null;
            job = (trafficjob)null;
            resultlog = (log)null;
            agent = (string)null;
            _proxy = (string)null;
            agent_desc = (string)null;
            lcts = (List<location>)null;
            lct = (string)null;
            target = (string)null;
            keyword = (string)null;
            namebusiness = (string)null;
            job_name = (string)null;
            SelJourney = (string)null;
            wholesearchterm = (string)null;
            exttarget = (string)null;
            FormFields = (string)null;
            JourneyURL = (string)null;
            SnippetContent = (string)null;
            Location_str = (string)null;
            realPublicIp = (string)null;
            windowSize = (string)null;
            surfresult = (SurfResult)null;
            return log;
        }

        public static void ReduceBounceRate(IWebDriver _driver, string target)
        {
            SettingManager.Logger(string.Format("ReduceBounceRate waiting for loading"));
            new WebDriverWait(_driver, TimeSpan.FromSeconds(60.0)).Until<bool>((Func<IWebDriver, bool>)(d => ((IJavaScriptExecutor)d).ExecuteScript("return document.readyState").Equals((object)"complete")));
            Random random = new Random();
            long num1 = (long)random.Next(2, 5);
            SettingManager.Logger(string.Format("ReduceBounceRate started: target {0} surf count {1}", (object)target, (object)num1));
            HtmlDocument htmlDocument = new HtmlDocument();
            try
            {
                int num2 = 0;
                while (true)
                {
                    ++num2;
                    if ((long)num2 <= num1)
                    {
                        htmlDocument.LoadHtml(_driver.PageSource);
                        HtmlNodeCollection htmlNodeCollection = htmlDocument.DocumentNode.SelectNodes("//a");
                        int index = 0;
                        int num3 = 0;
                        while (num3 < 50)
                        {
                            ++num3;
                            index = random.Next(htmlNodeCollection.Count - 1);
                            if (htmlNodeCollection[index].Attributes["href"].Value.Trim().Replace("https://", "").Replace("http://", "").Replace("/", "") != target.Trim().Replace("https://", "").Replace("http://", "").Replace("/", ""))
                                break;
                        }
                        SettingManager.Logger(string.Format("ReduceBounceRate surfing: {0} ", (object)htmlNodeCollection[index].Attributes["href"].Value));
                        IWebElement element = _driver.FindElement(By.XPath(htmlNodeCollection[index].XPath));
                        if (element != null)
                        {
                            try
                            {
                                BrowserAgent.RandomScroll(_driver);
                            }
                            catch (Exception ex)
                            {
                            }
                            try
                            {
                                BrowserAgent.Click(_driver, element);
                            }
                            catch (Exception ex)
                            {
                            }
                            try
                            {
                                BrowserAgent.RandomScroll(_driver);
                            }
                            catch (Exception ex)
                            {
                            }
                            if (target.Length > 0)
                            {
                                _driver.Navigate().GoToUrl(target);
                                try
                                {
                                    BrowserAgent.RandomScroll(_driver);
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                        }
                        Thread.Sleep(1000);
                    }
                    else
                        break;
                }
            }
            catch (Exception ex)
            {
                SettingManager.Logger(string.Format("ReduceBounceRate Exception: {0} stack:{1}", (object)ex.Message, (object)ex.StackTrace));
            }
        }

        public static void SendForm(
          IWebDriver _driver,
          string jobname,
          string SelJourney,
          string JourneyURL,
          string FormFields)
        {
            HtmlDocument htmlDocument = new HtmlDocument();
            Random random = new Random();
            if (JourneyURL.Length == 0)
                return;
            if (!SettingManager.WithGoogleForm(SelJourney))
                return;
            try
            {
                _driver.Navigate().GoToUrl(JourneyURL);
                if (BrowserAgent.WaitForPageLoding(_driver, "mG61Hd"))
                {
                    int index1 = random.Next(1, BrowserAgent.FakeInfo.Length - 1);
                    string[] strArray1 = new Regex(",(?=(?:[^\"]*\"[^\"]*\")*(?![^\"]*\"))").Split(BrowserAgent.FakeInfo[index1]);
                    htmlDocument.LoadHtml(_driver.PageSource);
                    HtmlNode documentNode = htmlDocument.DocumentNode;
                    string[] strArray2 = FormFields.Split(",", StringSplitOptions.None);
                    if (FormFields.Length <= 0 || strArray2.Length == 0)
                        return;
                    for (int index2 = 0; index2 < strArray2.Length; ++index2)
                    {
                        string[] strArray3 = strArray2[index2].Split(":", StringSplitOptions.None);
                        IWebElement element = _driver.FindElement(By.XPath("//input[@aria-label='" + strArray3[0].Trim() + "']"));
                        BrowserAgent.TypeLikeHuman(_driver, element, strArray1[(int)BrowserAgent.FakeSchema[(object)strArray3[1].Trim()]], false);
                    }
                    IWebElement element1 = _driver.FindElement(By.XPath("//div[@role='button']"));
                    BrowserAgent.Click(_driver, element1);
                }
                else
                    SettingManager.Logger(string.Format("SendForm: mG61Hd element does not exist"));
            }
            catch (Exception ex)
            {
                SettingManager.Logger(string.Format("Exception 30: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
            }
        }

        public static string SpinT1SearchTermBusiness(
          string keyword,
          string business,
          out string retbusiness,
          int pos = 0)
        {
            retbusiness = "";
            string[] strArray = keyword.Split("|", StringSplitOptions.None);
            string[] source = business.Split("|", StringSplitOptions.None);
            pos %= strArray.Length;
            if (((IEnumerable<string>)source).Count<string>() <= pos)
                pos = 0;
            retbusiness = source[pos];
            return strArray[pos];
        }

        public static string SpinSearchTerm(string keyword, int pos = 0)
        {
            if (keyword.Contains("|"))
            {
                string[] strArray = keyword.Split("|", StringSplitOptions.None);
                pos %= strArray.Length;
                return strArray[pos];
            }
            string[] strArray1 = keyword.Split(",", StringSplitOptions.None);
            pos %= strArray1.Length;
            return strArray1[pos];
        }

        public static string SpinSize(out int w, out int h)
        {
            w = 0;
            h = 0;
            int index = new Random().Next(0, BrowserAgent.screenSize.Length - 1);
            string[] strArray = BrowserAgent.screenSize[index].Split("x", StringSplitOptions.None);
            w = int.Parse(strArray[0]);
            h = int.Parse(strArray[1]);
            return BrowserAgent.screenSize[index];
        }

        public static void Click(IWebDriver driver, IWebElement input, bool bOnlyOnce = false)
        {
            int tickCount1 = Environment.TickCount;
            IJavaScriptExecutor driver1 = (IJavaScriptExecutor)BrowserAgent._driver;
            int num = 0;
            do
            {
                Thread.Sleep(1000);
                if (!input.Displayed || !input.Enabled)
                {
                    driver1.ExecuteScript("arguments[0].scrollIntoView(true);", (object)input);
                    ++num;
                }
                else
                    break;
            }
            while (num < 6);
            Point location = input.Location;
            int local1 = (location.X - 100);
            location = input.Location;
            int local2 = (location.Y - 100);
            string script = string.Format("window.scrollTo({0}, {1})", (object)local1, (object)local2);
            driver1.ExecuteScript(script);
            Thread.Sleep(1000);
            try
            {
                input.SendKeys(Keys.Enter);
                driver1.ExecuteScript("arguments[0].click();", (object)input);
            }
            catch (Exception ex)
            {
            }
            if (!bOnlyOnce)
            {
                Thread.Sleep(1000);
                try
                {
                    input.Click();
                }
                catch (Exception ex)
                {
                }
            }
            int tickCount2 = Environment.TickCount;
            if (tickCount2 - tickCount1 < 5000)
                Thread.Sleep(5000 - (tickCount2 - tickCount1));
            try
            {
                new WebDriverWait(BrowserAgent._driver, TimeSpan.FromSeconds(60.0)).Until<bool>((Func<IWebDriver, bool>)(d => ((IJavaScriptExecutor)d).ExecuteScript("return document.readyState").Equals((object)"complete")));
            }
            catch (Exception ex)
            {
            }
        }

        public static void SendKeys(IWebElement input, string text)
        {
            int tickCount1 = Environment.TickCount;
            input.SendKeys(text);
            int tickCount2 = Environment.TickCount;
            if (tickCount2 - tickCount1 >= 1000)
                return;
            Thread.Sleep(1000 - (tickCount2 - tickCount1));
        }

        public static void TypeLikeHuman(
          IWebDriver driver,
          IWebElement input,
          string token,
          bool withEnter = true)
        {
            Random random = new Random();
            int length = random.Next(1, 3);
            int startIndex = 0;
            SettingManager.Logger(string.Format("Start TypeLikeHuman"));
            HtmlDocument htmlDocument = new HtmlDocument();
            bool flag = false;
            while (true)
            {
                string text = token.Substring(startIndex, length);
                BrowserAgent.SendKeys(input, text);
                startIndex += length;
                if (startIndex < token.Length)
                {
                    int num = random.Next(1, 3);
                    length = startIndex + num > token.Length ? token.Length - startIndex : num;
                    Thread.Sleep(random.Next(200, 500));
                }
                else
                    break;
            }
            SettingManager.Logger(string.Format("End TypeLikeHuman"));
            if (flag)
            {
                htmlDocument.LoadHtml(driver.PageSource);
                HtmlNodeCollection source = htmlDocument.DocumentNode.SelectNodes("//button[@id='tsbb']");
                if (source != null)
                {
                    HtmlNode htmlNode = source.ElementAt<HtmlNode>(0);
                    try
                    {
                        BrowserAgent.Click(BrowserAgent._driver, BrowserAgent._driver.FindElement(By.XPath(htmlNode.XPath)));
                    }
                    catch (Exception ex)
                    {
                    }
                }
                else
                    BrowserAgent.SendKeys(input, Keys.Enter);
            }
            else if (withEnter)
            {
                htmlDocument.LoadHtml(driver.PageSource);
                try
                {
                    IEnumerable<HtmlNode> source = htmlDocument.DocumentNode.Descendants(nameof(input)).Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["value"] != null && node.Attributes["value"].Value == "Google Search"));
                    if (source.Count<HtmlNode>() == 0)
                        source = htmlDocument.DocumentNode.Descendants("button").Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["aria-label"] != null && node.Attributes["aria-label"].Value == "Google Search"));
                    if (source.Count<HtmlNode>() == 0)
                        source = htmlDocument.DocumentNode.Descendants("button").Where<HtmlNode>((Func<HtmlNode, bool>)(node => node.Attributes["aria-label"] != null && node.Attributes["aria-label"].Value == "Search"));
                    if (source.Count<HtmlNode>() != 0)
                        BrowserAgent.Click(BrowserAgent._driver, BrowserAgent._driver.FindElement(By.XPath(source.First<HtmlNode>().XPath)));
                }
                catch (Exception ex)
                {
                    SettingManager.Logger(string.Format("Exception 32: Message {0} Stack: {1}", (object)ex.Message, (object)ex.StackTrace));
                }
                try
                {
                    BrowserAgent.SendKeys(input, Keys.Enter);
                }
                catch
                {
                }
            }
            try
            {
                BrowserAgent.SendKeys(input, Keys.Enter);
                BrowserAgent.SendKeys(input, Keys.Enter);
            }
            catch
            {
            }
            SettingManager.Logger(string.Format("TypeLikeHuman Finished"));
        }

        public static string SpinAgent(int nAgentKind, int nAgentAge, out string agetn_desc)
        {
            agetn_desc = "UNKNOWN";
            if (BrowserAgent.agent_mobile_new == null)
            {
                string currentDirectory = Directory.GetCurrentDirectory();
                string[] first = File.ReadAllLines(currentDirectory + "/mobile_new.txt");
                string[] strArray1 = File.ReadAllLines(currentDirectory + "/mobile_old.txt");
                string[] strArray2 = File.ReadAllLines(currentDirectory + "/desktop_new.txt");
                string[] second = File.ReadAllLines(currentDirectory + "/desktop_old.txt");
                BrowserAgent.agent_mobile_new = first;
                BrowserAgent.agent_mobile_old = strArray1;
                BrowserAgent.agent_mobile_both = ((IEnumerable<string>)first).Concat<string>((IEnumerable<string>)strArray1).ToArray<string>();
                BrowserAgent.agent_desktop_new = strArray2;
                BrowserAgent.agent_desktop_old = second;
                BrowserAgent.agent_desktop_both = ((IEnumerable<string>)strArray2).Concat<string>((IEnumerable<string>)second).ToArray<string>();
                BrowserAgent.agent_both_new = ((IEnumerable<string>)first).Concat<string>((IEnumerable<string>)strArray2).ToArray<string>();
                BrowserAgent.agent_both_old = ((IEnumerable<string>)strArray1).Concat<string>((IEnumerable<string>)second).ToArray<string>();
                BrowserAgent.agent_both_both = ((IEnumerable<string>)BrowserAgent.agent_both_new).Concat<string>((IEnumerable<string>)BrowserAgent.agent_both_old).ToArray<string>();
            }
            Random random = new Random();
            string empty = string.Empty;
            int num1;
            if (nAgentKind == 1 && nAgentAge == 0)
                num1 = random.Next(0, 9) >= 9 ? 1 : 0;
            else if (nAgentKind == 1 && nAgentAge == 1)
                num1 = 0;
            else if (nAgentKind == 1 && nAgentAge == 2)
                num1 = 1;
            else if (nAgentKind == 2 && nAgentAge == 0)
                num1 = random.Next(0, 9) >= 9 ? 3 : 2;
            else if (nAgentKind == 2 && nAgentAge == 1)
                num1 = 2;
            else if (nAgentKind == 2 && nAgentAge == 2)
                num1 = 3;
            else if (nAgentKind == 0 && nAgentAge == 1)
                num1 = random.Next(0, 9) >= 5 ? 2 : 0;
            else if (nAgentKind == 0 && nAgentAge == 2)
            {
                num1 = random.Next(0, 9) >= 5 ? 3 : 1;
            }
            else
            {
                int num2 = random.Next(0, 9);
                int num3 = random.Next(0, 9);
                num1 = num2 >= 5 ? (num3 >= 9 ? 3 : 2) : (num3 >= 9 ? 1 : 0);
            }
            switch (num1)
            {
                case 0:
                    agetn_desc = "NEW_MOBILE";
                    int index1 = random.Next(0, BrowserAgent.agent_mobile_new.Length - 1);
                    empty = BrowserAgent.agent_mobile_new[index1];
                    break;
                case 1:
                    agetn_desc = "OLD_MOBILE";
                    int index2 = random.Next(0, BrowserAgent.agent_mobile_old.Length - 1);
                    empty = BrowserAgent.agent_mobile_old[index2];
                    break;
                case 2:
                    agetn_desc = "NEW_DESKTOP";
                    int index3 = random.Next(0, BrowserAgent.agent_desktop_new.Length - 1);
                    empty = BrowserAgent.agent_desktop_new[index3];
                    break;
                case 3:
                    agetn_desc = "OLD_DESKTOP";
                    int index4 = random.Next(0, BrowserAgent.agent_desktop_old.Length - 1);
                    empty = BrowserAgent.agent_desktop_old[index4];
                    break;
            }
            return empty;
        }
    }
}